<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用华硕AC68u做局域网透明代理</title>
    <url>/p/asus-ac68u-shadowsocks.html</url>
    <content><![CDATA[<h4 id="注意事项">注意事项</h4>
<ol>
<li>本文描述内容基于华硕固件384版本，</li>
<li>路由界面的固件升级不支持第三方固件</li>
<li>华硕官方梅林 不带软件中心页面</li>
<li>如果需要持久化程序，路由器需开启jffs分区 因其他分区在路由重启的时候会进行清理，不能持久化，而jffs分区是不会的(可在管理界面开启)</li>
</ol>
<h4 id="尝试且失败">尝试且失败</h4>
<h6 id="1-dnsmasq-ss-redir-ss-tunnel-ipset4-iptable">1.  dnsmasq + ss-redir + ss-tunnel + ipset4 + iptable</h6>
<ul>
<li><a class="link"   href="http://www.asussmart.com/smart/36.html" >开启ssh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 系统设置里开启ssh</li>
<li><a class="link"   href="https://www.snbforums.com/threads/how-to-install-entware-to-jffs-without-usb-flashdrive.39700/" >如何安装软件包管理器opkg 不使用外置U盘 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 原理主要是改安装文件/usr/sbin/entware-setup.sh 的一个文件系统格式验证</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Copy the file /usr/sbin/entware-setup.sh to jffs and then modify the PART_TYPES variables on line 23 and 27 to include the jffs partition</span><br><span class="line"></span><br><span class="line">Code:</span><br><span class="line">case $(uname -m) in</span><br><span class="line">  armv7l)</span><br><span class="line">    PART_TYPES=&#x27;ext2|ext3|ext4|jffs2&#x27;</span><br><span class="line">    INST_URL=&#x27;http://pkg.entware.net/binaries/armv7/installer/entware_install.sh&#x27;</span><br><span class="line">    ;;</span><br><span class="line">  mips)</span><br><span class="line">    PART_TYPES=&#x27;ext2|ext3|jffs2&#x27;</span><br><span class="line">    INST_URL=&#x27;http://pkg.entware.net/binaries/mipsel/installer/installer.sh&#x27;</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    echo &quot;This is unsupported platform, sorry.&quot;</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></div>
<ul>
<li><a class="link"   href="https://w2x.me/2018/09/20/ASUS-66u-%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86/" >参考文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 按文章操作后路由器进入一直重启状态，原因未知 <strong>failed</strong></li>
</ul>
<h6 id="2-救援模式刷advancedtomato-参考文章">2. 救援模式刷advancedtomato <a class="link"   href="https://tedstechshack.com/2015/10/26/how-to-flash-advancedtomato-firmware-on-an-asus-rt-ac68u-router/" >参考文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h6>
<ul>
<li>刷完系统直接进入救援模式(原因未知) <strong>failed</strong></li>
</ul>
<h4 id="最终方案-koolshare-merlin">最终方案 koolshare-merlin</h4>
<ol>
<li>通过<a class="link"   href="http://52asus.com/thread-34-1-2.html" >救援模式 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>刷koolshare-merlin</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Step1.安装程式，可以去ASUS官网下载公用程序,然后安装,如RT-AC68U可以在此链接下载 http://www.asus.com.cn/Networking/RTAC68U/#support</span><br><span class="line">Step2.让Router进入救援模式:此操作很关键,先关机,再按住路由器Reset 按钮不放的同时接通路由器电源，直到看到电源灯慢闪时放开Reset按钮.</span><br><span class="line">Step3.电脑接到路由器的Lan 端口，且需要固定IP地址(192.168.1.xxx)</span><br><span class="line"></span><br><span class="line">Step4.开启Firmware Restoration程式(如下图)，点击“Browse”button 选择固件存放路径后点击“Upload”button.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Step5.等待1~3分钟完成,按照提示重启路由器，最好再通过再用Reset按钮使路由器恢复出.</span><br><span class="line"></span><br><span class="line">//Step2 是进入救援模式 其他步骤为通过华硕官方程序(不支持macOs)刷固件</span><br><span class="line">//当进入救援模式后，访问路由地址192.168.x.x, 会进入miniWeb 界面，在界面中也可以刷固件，只是miniweb没有程序好用？偶尔打不开，而程序是一直ok的</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li><a class="link"   href="https://firmware.koolshare.cn/Koolshare_Merlin_Legacy_380/ASUS/RT-AC68U/X7.9/" >固件地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>刷完后路由界面就增加软件中心了，这时候需完成 -&gt;开启jffs-&gt;更新软件中心</li>
<li>当前固件版本不内置ss在软件列表中，可通过<a class="link"   href="https://www.codeidc.com/archives/99" >离线安装 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>模式安装 //<a class="link"   href="https://raw.githubusercontent.com/hq450/fancyss_history_package/master/fancyss_arm/shadowsocks_4.0.5.tar.gz" >软件包 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget --no-check-certificate https://github.com/hq450/fancyss/blob/master/fancyss_arm/shadowsocks.tar.gz</span><br><span class="line">tar -zxvf /tmp/shadowsocks.tar.gz</span><br><span class="line">chmod +x /tmp/shadowsocks/install.sh</span><br><span class="line">sh /tmp/shadowsocks/install.sh</span><br><span class="line"></span><br><span class="line"># 或者下载 shadowsocks.tar.gz 后在软件中心页离线安装中上传</span><br></pre></td></tr></table></figure></div>
<ol start="5">
<li>之后就是配置ss，配置完开启就ok了</li>
</ol>
<h6 id="备注-koolshare-merlin-为闭源固件，问题不是很大，但是毕竟未开源，有时间再折腾其他固件">备注:koolshare-merlin 为闭源固件，问题不是很大，但是毕竟未开源，有时间再折腾其他固件</h6>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shadowsocks</tag>
        <tag>example</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客搭建</title>
    <url>/p/build-blog.html</url>
    <content><![CDATA[<h1>Hexo 博客搭建</h1>
<h2 id="What-is-Hexo">What is Hexo?</h2>
<p>Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other markup languages) and Hexo<br>
generates static files with a beautiful theme in seconds.</p>
<p>(copy from <a class="link"   href="https://hexo.io/docs/" >https://hexo.io/docs/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</p>
<ul>
<li>hexo 是一个博客搭建框架</li>
<li>hexo 自带主题比较简单，通常会选择找一个更适合的主题</li>
</ul>
<h2 id="Hexo-环境">Hexo 环境</h2>
<ul>
<li>nodejs</li>
</ul>
<p>nodejs 安装推荐使用<a class="link"   href="https://github.com/nvm-sh/nvm" >nvm <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, 支持本地多版本环境切换</p>
<ul>
<li><a class="link"   href="https://hexo.io/docs/#Install-Hexo" >hexo-cli <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></div>
<h2 id="Hexo-Setup">Hexo Setup</h2>
<p>Once Hexo is installed, run the following commands to initialize Hexo in the target <folder>.</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></div>
<p>Once initialized, here’s what your project folder will look like:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></div>
<h3 id="config-yml">_config.yml</h3>
<p>Site configuration file. You can configure most settings here.</p>
<h3 id="package-json">package.json</h3>
<p>Application data. The EJS, Stylus and Markdown renderers are installed by default. If you want, you can uninstall them<br>
later.</p>
<p>package.json</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>copy from (<a class="link"   href="https://hexo.io/docs/setup" >https://hexo.io/docs/setup <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</p>
<h2 id="Hexo-主题安装">Hexo 主题安装</h2>
<p>本站点使用 <a class="link"   href="https://redefine-docs.evanluo.top/" >redefine 主题 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, 当前安装版本 v0.4.5</p>
<ul>
<li>简洁、五脏俱全</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> your-hexo-site</span><br><span class="line">npm install hexo-theme-redefine@latest</span><br></pre></td></tr></table></figure></div>
<h3 id="安装完成后，在-Hexo-配置文件中将-theme-设置为-Redefine。">安装完成后，在 Hexo 配置文件中将 theme 设置为 Redefine。</h3>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line">theme: redefine</span><br></pre></td></tr></table></figure></div>
<p>顺便删除自带主题</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">rm</span> <span class="string">_config.landscape.yml</span></span><br><span class="line"></span><br><span class="line"><span class="string">npm</span> <span class="string">remove</span> <span class="string">hexo-theme-landscape</span></span><br></pre></td></tr></table></figure></div>
<p>这个主题基本是开箱即用，默认的配置就挺好的，可以修改一些偏个人信息的部分</p>
<h3 id="修改配置">修改配置</h3>
<p>首先从主题文件中复制默认配置到项目根目录</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> node_modules/hexo-theme-redefine/_config.yml _config.redefine.yml</span><br></pre></td></tr></table></figure></div>
<p>修改配置中基础信息部分 _config.redefine.yml</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础信息</span></span><br><span class="line"><span class="attr">base_info:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Attson</span> <span class="string">Thinking</span> <span class="comment"># Site title</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">Attson</span> <span class="comment"># Author name</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://attson.github.io</span> <span class="comment"># Site url</span></span><br><span class="line">  <span class="comment"># Logo image (You can use local image, image external link or don’t fill)</span></span><br><span class="line">  <span class="attr">logo_img:</span> <span class="comment"># logo image on the left of the navigation bar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者头像和网站图标部分</span></span><br><span class="line"><span class="attr">style:</span></span><br><span class="line">  <span class="comment"># 说明: images 路径 -&gt; 在source/images </span></span><br><span class="line">  <span class="comment"># &lt;= v0.4.5 主题内置文件 images/(avatar.svg loading.svg logo.svg logo.webp), 请避开这些文件命名</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">/images/my_avatar.svg</span> <span class="comment"># avatar of the author</span></span><br><span class="line">  <span class="comment"># Favicon (You can use local image or image external link)</span></span><br><span class="line">  <span class="attr">favicon:</span> <span class="string">/images/my_logo.svg</span> <span class="comment"># favicon of the site</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">first_screen:</span></span><br><span class="line">    <span class="attr">background_image:</span></span><br><span class="line">      <span class="attr">light:</span> <span class="string">/images/background.jpeg</span> <span class="comment"># background image of the first screen, use relative path or external link (if your website is in subdirectory, use external link)</span></span><br><span class="line">      <span class="attr">dark:</span> <span class="string">/images/background.jpeg</span> <span class="comment"># background image of the first screen, use relative path or external link (if your website is in subdirectory, use external link)</span></span><br><span class="line">    <span class="comment"># 网站首页一段文案，可以改成自己喜欢的</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">可怕的不是死亡，而是你从未真正活过</span> <span class="comment"># the title in the middle of the first screen. HTML supported (e.g. svg html code of your logo)</span></span><br><span class="line"><span class="comment"># 菜单部分</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="comment"># 增加 tags 页</span></span><br><span class="line">  <span class="attr">Tags:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/tags</span></span><br></pre></td></tr></table></figure></div>
<h2 id="部署-github-io">部署 <a class="link"   href="http://github.io" >github.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2>
<ul>
<li>本站点为了区分源文件和静态站点文件，采用两个仓库来维护博客</li>
<li>私有仓库 attson-blog 用于放源文件</li>
<li>公开仓库 <a href="http://attson.github.io">attson.github.io</a> 用于放build后的静态文件, GitHub pages</li>
</ul>
<p>注意: 默认情况 <code>hexo generate</code> 是忽略过程中的异常，在自动化构建脚本中，忽略异常可能会导致部署了有bug的博客。增加 -b 参数</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate -b&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="自动化部署使用-github-workflows">自动化部署使用 github workflows</h3>
<ul>
<li>使用 github workflows 好处是不需要再依赖其他deploy插件</li>
</ul>
<p>增加文件 .github/workflows/deploy.yml</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件内容基本来自 https://hexo.io/docs/github-pages</span></span><br><span class="line"><span class="comment"># 统一使用v3 版本 v2 部分功能已弃用</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span>  <span class="comment"># default branch</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">pages:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># If your repository depends on submodule, please see: https://github.com/actions/checkout</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="string">recursive</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">16.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;16&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-npm-cache</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="comment"># 配置说明 https://github.com/peaceiris/actions-gh-pages</span></span><br><span class="line">        <span class="comment"># 修改最后部署的部分 (如不区分两个仓库，则无需修改)</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_GITHUB_IO_SECRECT</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">external_repository:</span> <span class="string">&quot;attson/attson.github.io&quot;</span></span><br><span class="line">          <span class="attr">publish_branch:</span> <span class="string">master</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">          <span class="comment"># 修改 commit 信息，默认是 attson/attson-blog@30438be</span></span><br><span class="line">          <span class="attr">full_commit_message:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure></div>
<h4 id="其中-deploy-key-需要在两个仓库分别设置-ssh-私钥和公钥">其中 deploy_key 需要在两个仓库分别设置 ssh 私钥和公钥</h4>
<p>生成keys</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;&lt;your email address&gt;&quot;</span> -f <span class="string">&quot;attson.github.io&quot;</span> -N <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></div>
<h4 id="在公开仓库-attson-github-io-添加-deploy-key，用于支持部署（公钥）">在公开仓库 <a href="http://attson.github.io">attson.github.io</a> 添加 deploy key，用于支持部署（公钥）</h4>
<ul>
<li>Title 任意</li>
<li>注意勾选 write access</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/build-blog/deploy.png"
                      class="" title="deploy.png"
                >
<h4 id="在私有仓库-attson-blog-添加-secrets-key，用于访问-attson-github-io（私钥）">在私有仓库 attson-blog 添加 secrets key，用于访问 <a href="http://attson.github.io">attson.github.io</a>（私钥）</h4>
<ul>
<li>title 需与 .github/workflows/deploy.yml 中 deploy_key 一致 DEPLOY_GITHUB_IO_SECRECT</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/build-blog/secret.png"
                      class="" title="secret.png"
                >
<h4 id="git-commit-git-push">git commit &amp;&amp; git push</h4>
<ul>
<li>配置完以上后，就可以直接提交代码到 源文件仓库了，github 的 workflow 会在提交之后自动触发</li>
<li>在 Actions 处可以看到 workflow 情况</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/build-blog/action.png"
                      class="" title="action.png"
                >
<h2 id="其他">其他</h2>
<h3 id="gitalk-评论支持">gitalk 评论支持</h3>
<p><a class="link"   href="https://redefine-docs.evanluo.top/docs/configuration-guide/comment#gitalk" >https://redefine-docs.evanluo.top/docs/configuration-guide/comment#gitalk <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>[redefine &lt;= v0.4.5 gitalk 代码有<a class="link"   href="https://github.com/EvanNotFound/hexo-theme-redefine/issues/36" >bug #36 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>]</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">gitalk</span> <span class="comment"># values: waline | gitalk | twikoo</span></span><br><span class="line">  <span class="comment"># Gitalk</span></span><br><span class="line">  <span class="comment"># See: https://github.com/gitalk/gitalk</span></span><br><span class="line">  <span class="attr">gitalk:</span></span><br><span class="line">    <span class="attr">github_id:</span> <span class="string">attson</span> <span class="comment"># GitHub repo owner</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">attson.github.io</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">    <span class="attr">client_id:</span> <span class="string">&lt;GitHub</span> <span class="string">Application</span> <span class="string">Client</span> <span class="string">ID&gt;</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">    <span class="attr">client_secret:</span> <span class="string">&lt;GitHub</span> <span class="string">Application</span> <span class="string">Client</span> <span class="string">Secret&gt;</span> <span class="comment"># GitHub Application Client Secret</span></span><br></pre></td></tr></table></figure></div>
<h4 id="新建github-oath-应用">新建github oath 应用</h4>
<p><a class="link"   href="https://github.com/settings/applications/new" >https://github.com/settings/applications/new <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/build-blog/application.png"
                      class="" title="comment.png"
                >
<h3 id="markdown-嵌套图片的问题">markdown 嵌套图片的问题</h3>
<ul>
<li>官方推荐的嵌入图片的方式 <a class="link"   href="https://hexo.io/zh-tw/docs/tag-plugins#Embed-image" >https://hexo.io/zh-tw/docs/tag-plugins#Embed-image <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 不太符合markdown 通用写法</li>
</ul>
<p>本站点使用 <a class="link"   href="https://github.com/yiyungent/hexo-asset-img" >https://github.com/yiyungent/hexo-asset-img <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 插件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-img --save</span><br></pre></td></tr></table></figure></div>
<h3 id="markdown-默认渲染器">markdown 默认渲染器</h3>
<ul>
<li>
<p>hexo 默认使用 hexo-renderer-marked 对 markdown 渲染，渲染库支持的语法和功能较少，无法用插件方式新增其他语法，</p>
</li>
<li>
<p>推荐使用 <a class="link"   href="https://github.com/hexojs/hexo-renderer-markdown-it" >hexo-renderer-markdown-it <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, 默认支持的语法更多，也可以添加额外的插件</p>
</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line"></span><br><span class="line">npm install hexo-renderer-markdown-it --save</span><br></pre></td></tr></table></figure></div>
<h3 id="参考">参考</h3>
<ul>
<li>seo 优化 <a class="link"   href="https://juejin.cn/post/6844904178452529160" >https://juejin.cn/post/6844904178452529160 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>example</tag>
      </tags>
  </entry>
  <entry>
    <title>centos 安装 shadowsocks</title>
    <url>/p/centos-shadowsocks.html</url>
    <content><![CDATA[<h2 id="使用版本">使用版本</h2>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br><span class="line">Linux ecs-w0xX6 3.10.0-957.12.2.el7.x86_64 #1 SMP Tue May 14 21:24:32 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line">Shadowsocks Libev 3.3.5</span><br></pre></td></tr></table></figure></div>
<h2 id="一、手动编译安装">一、手动编译安装</h2>
<p>参考：<br>
- <a class="link"   href="https://github.com/shadowsocks/shadowsocks-libev#fedora%E2%80%94rhel" >https://github.com/shadowsocks/shadowsocks-libev#fedora—rhel <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>
- <a class="link"   href="https://b.awei.pub/2019/03/shadowsocks-libev/" >https://b.awei.pub/2019/03/shadowsocks-libev/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="1-安装">1. 安装</h3>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line"></span><br><span class="line">yum install git gcc gettext autoconf libtool automake make pcre-devel asciidoc xmlto c-ares-devel libev-devel libsodium-devel mbedtls-devel -y</span><br><span class="line"></span><br><span class="line">git clone https://github.com/shadowsocks/shadowsocks-libev.git</span><br><span class="line"></span><br><span class="line">cd shadowsocks-libev</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line"></span><br><span class="line">sh autogen.sh</span><br><span class="line"></span><br><span class="line">./configure --disable-documentation</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></div>
<h3 id="2-配置systemctl-管理">2. 配置systemctl 管理</h3>
<h5 id="添加服务配置">+ 添加服务配置</h5>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp shadowsocks-libev/rpm/SOURCES/systemd/shadowsocks-libev.service /usr/lib/systemd/system/</span><br><span class="line">cp shadowsocks-libev/rpm/SOURCES/systemd/shadowsocks-libev.default /etc/sysconfig/shadowsocks-libev</span><br></pre></td></tr></table></figure></div>
<p>注意检查 shadowsocks-libev/rpm/SOURCES/systemd/shadowsocks-libev.service 文件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/bin/ss-server -c &quot;$CONFFILE&quot; $DAEMON_ARGS</span><br></pre></td></tr></table></figure></div>
<p>/usr/bin/ss-server 改成 ss-server 的安装目录 默认是在 /usr/local/bin/ss-server</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/local/bin/ss-server -c &quot;$CONFFILE&quot; $DAEMON_ARGS</span><br></pre></td></tr></table></figure></div>
<h5 id="操作命令">+ 操作命令</h5>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable shadowsocks-libev</span><br><span class="line">systemctl start shadowsocks-libev</span><br><span class="line">systemctl stop shadowsocks-libev</span><br><span class="line">systemctl status shadowsocks-libev</span><br></pre></td></tr></table></figure></div>
<h2 id="相关问题和方案">相关问题和方案</h2>
<h3 id="1-This-system-doesn’t-provide-enough-entropy-to-quickly-generate-high-quality-random-numbers">1. This system doesn’t provide enough entropy to quickly generate high-quality random numbers.</h3>
<p><a class="link"   href="https://github.com/shadowsocks/shadowsocks-libev/issues/1384" >参考 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-10-23 22:27:03 INFO: binding to outbound IPv4 addr: 127.0.0.1</span><br><span class="line">2020-10-23 22:27:03 INFO: using tcp fast open</span><br><span class="line">2020-10-23 22:27:03 INFO: UDP relay enabled</span><br><span class="line">2020-10-23 22:27:03 INFO: initializing ciphers... chacha20</span><br><span class="line">2020-10-23 22:27:03 INFO: This system doesn&#x27;t provide enough entropy to quickly generate high-quality random numbers.</span><br><span class="line">Installing the rng-utils/rng-tools, jitterentropy or haveged packages may help.</span><br><span class="line">On virtualized Linux environments, also consider using virtio-rng.</span><br><span class="line">The service will not start until enough entropy has been collected.</span><br></pre></td></tr></table></figure></div>
<p>解决方案:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y rng-tools</span><br><span class="line">rngd -r /dev/urandom</span><br></pre></td></tr></table></figure></div>
<h3 id="2-tcp-fast-open-未开启">2. tcp fast open 未开启</h3>
<p>如果未开启<a class="link"   href="https://blog.csdn.net/Windgs_YF/article/details/94743088" >tcp fast open <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>会出现如下报错</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-10-23 22:27:04 ERROR: fast open is not supported on this platform</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/centos-shadowsocks/fast_open.jpg"
                      class="" title="tcp fast open"
                >
<p>解决方案:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/tcp_fastopen</span><br></pre></td></tr></table></figure></div>
<h3 id="3-ss-sever-升级到3-2-0-时-fast-open-connect-Invalid-argument">3. ss-sever 升级到3.2.0+ 时 fast_open_connect: Invalid argument</h3>
<p><a class="link"   href="https://github.com/shadowsocks/shadowsocks-libev/issues/2196" >参考 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-10-23 23:29:15 ERROR: fast_open_connect: Invalid argument</span><br><span class="line">2020-10-23 23:29:15 ERROR: getpeername: Transport endpoint is not connected</span><br></pre></td></tr></table></figure></div>
<p>解决方案:</p>
<p>删除配置中的 local_address local_port</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/centos-shadowsocks/getpeername.jpg"
                      class="" title="getpeername"
                >
<h2 id="其他">其他</h2>
<h4 id="centos7-记得配置防火墙">centos7 记得配置防火墙</h4>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=&#123;PORT/tcp,PORT/udp&#125;</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shadowsocks</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Cloudflare 加速(中转)节点访问</title>
    <url>/p/cloudflare_cdn_proxy.html</url>
    <content><![CDATA[<p>前提：</p>
<ol>
<li>你需要具备外币卡/Paypal (只开通服务，不收费)</li>
<li>两个主域名</li>
</ol>
<h3 id="CDN-技术">CDN 技术</h3>
<p>在配置之前，在简单说一下cdn技术</p>
<p>内容交付网络(CDN) 是一组分布在不同地理位置的服务器，它将Web 内容存放在更靠近用户的位置，从而加速Web 内容的交付</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img2.png"
                      class="" title="img.png"
                >
<p>简而言之</p>
<ol>
<li>cdn 就是一个服务商搭建的一套网状覆盖区域的 节点池</li>
<li>每个节点都会缓存静态资源</li>
<li>cdn访问就近的节点，如果该节点无所需资源，会按照cdn服务商自己的链路往上游节点访问，直至访问到 <strong>源站</strong></li>
</ol>
<p>结论，当你的所有资源都是非静态资源（或者缓存策略都是不缓存），那就会按照 cdn 服务商优化链路，访问到源站，即 <strong>DCDN</strong></p>
<p><strong>当然有一些服务商提供的CDN只支持静态资源，就无法作为流量节点加速使用</strong></p>
<h2 id="简化流程">简化流程</h2>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">客户端 -&gt; [cloudflare ip/域名 -&gt; 回源策略] -&gt; server.ip</span><br></pre></td></tr></table></figure></div>
<h2 id="先讲原理">先讲原理</h2>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1 -&gt; 104.27.112.31 (cf 公共cnd节点 ip) -&gt; server.ip</span><br></pre></td></tr></table></figure></div>
<h4 id="为什么通过-cf-ip-能够直接访问到-server-ip"><strong>为什么通过 cf ip 能够直接访问到 server.ip?</strong></h4>
<p>难道是 cf 里面可以直接配置 ip -&gt; server.ip 的反向代理？类似 nginx ?</p>
<p>显然不是那么简单，如果是单纯使用nginx ip 代理方案，那不就是所有人访问这个公共ip 都会指向自己的server.ip 了。</p>
<p>所以上面的链路体现的不完善，再完善上面的链路:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1 -&gt; my.server.com + 104.27.112.31 (cf 公共cnd节点 ip) -&gt; server.ip</span><br></pre></td></tr></table></figure></div>
<p>在真实的链路中，需要指定自己的域名，然后cf根据 “域名-&gt;server.ip 的映射关系”，完成代理链路</p>
<p>理论成立开始实操</p>
<h2 id="Cloudflare-配置">Cloudflare 配置</h2>
<p>在 Cloudflare 中的 DCDN 产品，是 <strong>网站服务里面 -&gt; SSL/TLS -&gt; 自定义主机名</strong> 提供的</p>
<p>所以在上述的理论链路在cf平台配置后实际链路是这样的</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1 -&gt; my.server.com + 104.27.112.31 (cf 公共cnd节点 ip) -&gt; ssl/tls 回源策略 -&gt; 回源域名 -&gt; 回源域名dns解析 -&gt; server.ip</span><br></pre></td></tr></table></figure></div>
<ul>
<li><em><strong>回源域名必须是在 cf 管理的域名</strong></em> (回源域名其实在使用时对用户时无感的，只用于回源域名解析)</li>
<li><em><strong><a class="link"   href="http://my.server.com" >my.server.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 必须是非 cf 管理的域名</strong></em> (用户真实使用的域名)</li>
</ul>
<p>所以本质是:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1 -&gt; 需要加速的节点 </span><br><span class="line">变成</span><br><span class="line">127.0.0.1 -&gt; cf -&gt; 需要加速的节点</span><br></pre></td></tr></table></figure></div>
<p>这个过程需要两个主域名参与配置</p>
<h3 id="配置网站（让CF托管一个域名，用于回源）">配置网站（让CF托管一个域名，用于回源）</h3>
<p>打开：<a class="link"   href="https://dash.cloudflare.com/sign-up" >https://dash.cloudflare.com/sign-up <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>1、</strong> 注册一个 Cloudflare 账号，有账号的话你就登录啊</p>
<p><strong>2、</strong> 添加主域名，用于回源的</p>
<p>这个域名不重要，用户不会直接访问，如果没有的话，可以找个免费域名平台申请一个</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img3.png"
                      class="" title="img.png"
                >
<p><strong>3、</strong> 选择免费计划，点击继续</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img4.png"
                      class="" title="img.png"
                >
<p><strong>4、</strong> 添加一个dns记录，<strong>用于回源</strong></p>
<p>Cloudflare会自动检测你现在有的DNS记录，自动添加。</p>
<p>如果已经有一条用于回源的记录，A记录或者CNAME都行，则无需再建 (指向服务节点)</p>
<p>如 <a class="link"   href="http://origin.test.com" >origin.test.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img5.png"
                      class="" title="img.png"
                >
<p><strong>5、</strong> 修改该主域名的dns解析，让CF管理</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img6.png"
                      class="" title="img.png"
                >
<p><strong>具体如何修改，不同的运营商方式不同，以阿里云为例</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img7.png"
                      class="" title="img.png"
                >
<p><strong>6、</strong> DNS托管完成后，回到CF平台，开启SaaS服务，<strong>需要绑定外币卡/Paypal</strong>，不会扣费</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img8.png"
                      class="" title="img_1.png"
                >
<p><strong>7、</strong> 配置 SSL/TLS -&gt; 自定义主机名 -&gt; 回退源</p>
<ul>
<li>回退源就是上面配置的 <a class="link"   href="http://origin.test.com" >origin.test.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img9.png"
                      class="" title="img.png"
                >
<p>添加后点击刷新，正常情况下 回退源状态 应为：有效</p>
<p><strong>8、</strong> 添加自定义主机名。该域名就是真实加速域名，必须是非CF管理域名</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img10.png"
                      class="" title="img.png"
                >
<p><strong>9、</strong> 配置主机名和SSL验证，CF需要验证你有该域名的管理权限和下发SSL证书</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img11.png"
                      class="" title="img.png"
                >
<p><strong>回到你的需要加速域名的域名管理平台，添加dns txt记录，用于验证主机。以阿里云为例</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img12.png"
                      class="" title="img.png"
                >
<p><strong>主机名验证完成后，添加dns txt记录，用于颁发SSL。以阿里云为例</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img13.png"
                      class="" title="img.png"
                >
<p><strong>都验证完成后状态</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img14.png"
                      class="" title="img.png"
                >
<p><strong>10、</strong> 最后确保 <a class="link"   href="http://blog.mysite.com" >blog.mysite.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 解析到CF上，A记录或者CNAME</p>
<ul>
<li>A记录解析到CF ip上 (优选ip)</li>
<li>CNAME解析到CF 域名上 (优选域名)</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img15.png"
                      class="" title="img.png"
                >
<p><strong>此时，访问 <a class="link"   href="http://blog.mysite.com" >blog.mysite.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 就会通过CF节点，并回源到 <a class="link"   href="http://origin.test.com" >origin.test.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<h2 id="注意事项">注意事项</h2>
<p>默认情况下，选择回源的模式是 灵活，意味着 CF -&gt; <a class="link"   href="http://origin.test.com" >origin.test.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 走的都是80端口，无SSL</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img16.png"
                      class="" title="img.png"
                >
<p>比如 curl <a class="link"   href="http://blog.mysite.com" >http://blog.mysite.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or curl <a class="link"   href="https://blog.mysite.com" >https://blog.mysite.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>都是相当于 curl <a class="link"   href="http://origin.test.com" >http://origin.test.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<hr>
<p>但是实测当 curl <a class="link"   href="https://blog.mysite.com:8443" >https://blog.mysite.com:8443 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 时，cf 会强制后端链路需要SSL, 相当于 curl <a class="link"   href="http://origin.test.com:8443" >http://origin.test.com:8443 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://developers.cloudflare.com/fundamentals/reference/network-ports/" >其他支持的端口没有测试 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="如何调整回源端口和SSL策略">如何调整回源端口和SSL策略</h3>
<p><strong>1、</strong> SSL 策略</p>
<p>方式一、在上图中调整为 <strong>完全模式</strong>，则会按照请求端口并使用SSL建立回源链接。（这个配置会对该域下所有的自定义主机名生效）</p>
<p>方式二、通过规则配置，针对不同规则应用配置，比如指定 <a class="link"   href="http://blog.mysite.com" >blog.mysite.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 的回源是使用 <strong>完全模式</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img17.png"
                      class="" title="img.png"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img18.png"
                      class="" title="img.png"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img19.png"
                      class="" title="img.png"
                >
<p><strong>2、</strong> 回源端口自定义</p>
<p>比如想要实现 curl <a class="link"   href="http://blog.mysite.com" >http://blog.mysite.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> -&gt; curl <a class="link"   href="https://origin.test.com:8443" >https://origin.test.com:8443 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img20.png"
                      class="" title="img.png"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/cloudflare_cdn_proxy/img21.png"
                      class="" title="img.png"
                >
<h3 id="其他说明">其他说明</h3>
<ul>
<li>因为节点基本在海外，所以套CF中转，速度不会很理想</li>
<li>但是使用移动网络的话，可能会使用 Cloudflare 香港节点，理论上会有不错的速度</li>
<li>作为代理的话，可以用于防止 ip 被墙或者已经被墙</li>
<li>作为免费cdn，会有一定的价值，毕竟不会被墙</li>
<li>这套方案理论上可以做其他更多的事情</li>
<li>如果过程中出现5xx 4xx
<ul>
<li>请检查是否一个主域名在CF管理，一个在其他平台</li>
<li>请检查回源端口和回源ssl策略</li>
</ul>
</li>
</ul>
<h3 id="参考链接">参考链接</h3>
<ul>
<li><a class="link"   href="https://github.com/233boy/v2ray/wiki/%E4%BD%BF%E7%94%A8Cloudflare%E4%B8%AD%E8%BD%ACV2Ray%E6%B5%81%E9%87%8F" >https://github.com/233boy/v2ray/wiki/使用Cloudflare中转V2Ray流量 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://linux.do/t/topic/114314" >https://linux.do/t/topic/114314 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>Composer 私有仓库搭建</title>
    <url>/p/composer-private.html</url>
    <content><![CDATA[<h1>Composer 私有仓库搭建</h1>
<p>composer 私有仓库搭建方案有以下三种</p>
<ol>
<li>
<p><a class="link"   href="https://github.com/composer/satis"  title="Satis">Satis <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 官方推荐的工具</p>
<p>基本满足要求，缺点就是增加自己的package每次需要手动修改配置，版本更新需要手动，比较繁琐</p>
</li>
<li>
<p><a class="link"   href="https://github.com/ludofleury/satisfy"  title="Satisfy">Satisfy <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 在Satis基础上增加了一些便捷的功能，webhook，图形界面增加仓库等</p>
</li>
<li>
<p>coding by yourself.;</p>
</li>
</ol>
<p>本文使用 <a class="link"   href="https://github.com/ludofleury/satisfy"  title="Satisfy">Satisfy <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> + docker进行搭建</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/composer-private/image_a4urwWFHJZ.png"
                      class=""
                >
<h2 id="一、下载">一、下载</h2>
<p>选择一个目录 /var/www/satisfy (<em>该目录要与后面容器内的目录保持一致</em>);</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># current commit hash master@7e2a472</span><br><span class="line">git clone https://github.com/ludofleury/satisfy /var/www/satisfy</span><br><span class="line"></span><br><span class="line">cd /var/www/satisfy</span><br><span class="line"></span><br><span class="line">chown -R www-data:www-data .</span><br></pre></td></tr></table></figure></div>
<h2 id="二、配置docker">二、配置docker</h2>
<h3 id="Dockerfile">Dockerfile</h3>
<p>修改docker/php/Dockerfile</p>
<p>（因为本文nginx 是宿主机提供的，不是独立一个nginx 容器，配置上与官方有些差异）</p>
<div class="highlight-container" data-rel="Docker"><figure class="iseeu highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">8.0</span>-fpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 国内源加速</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i s/deb.debian.org/mirrors.tuna.tsinghua.edu.cn/g /etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt install -qy wget curl git zip unzip &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt clean &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保证外部的www-data 与 容器内的 www-data uid、gid 相同</span></span><br><span class="line"><span class="keyword">ARG</span> UNAME=www-data</span><br><span class="line"><span class="keyword">ARG</span> UGROUP=www-data</span><br><span class="line"><span class="keyword">ARG</span> UID=<span class="number">1000</span></span><br><span class="line"><span class="keyword">ARG</span> GID=<span class="number">1000</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> usermod  --uid <span class="variable">$UID</span> <span class="variable">$UNAME</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> groupmod --gid <span class="variable">$GID</span> <span class="variable">$UGROUP</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> wget -O /usr/local/bin/composer https://getcomposer.org/download/latest-stable/composer.phar &amp;&amp; <span class="built_in">chmod</span> +x /usr/local/bin/composer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gitlab ssh</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> id_rsa /var/www/.ssh/id_rsa</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> 0600 /var/www/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> php.ini /usr/local/etc/php/conf.d/satisfy.ini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /var/www/.ssh &amp;&amp; <span class="built_in">chmod</span> 0700 /var/www/.ssh &amp;&amp; ssh-keyscan -H github.com &gt;&gt; /var/www/.ssh/known_hosts &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mkdir</span> -p /var/www/.composer &amp;&amp; <span class="built_in">chown</span> www-data:www-data /var/www/.composer</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 保证 www-data 用户权限</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chown</span> -R www-data:www-data /var/www</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gitlab ssh known_hosts, 不优先添加，webhook 处理在ssh方式下会处理异常</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> ssh-keyscan -p 222 -H &lt;my.gitlab.com&gt; &gt;&gt; /var/www/.ssh/known_hosts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> www-data</span><br></pre></td></tr></table></figure></div>
<h3 id="DockerCompose">DockerCompose</h3>
<p>修改 docker-composer.yml</p>
<div class="highlight-container" data-rel="Docker"><figure class="iseeu highlight docker"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  php:</span><br><span class="line">    build:</span><br><span class="line">      context: ./docker/php</span><br><span class="line">    container_name: satisfy_php</span><br><span class="line">    <span class="keyword">user</span>: www-data</span><br><span class="line">    working_dir: /var/www/satisfy</span><br><span class="line">    volumes:</span><br><span class="line">      - .:/var/www/satisfy</span><br><span class="line">      - /var/www/.composer</span><br><span class="line">    environment:</span><br><span class="line">      APP_ENV: $&#123;APP_ENV:-dev&#125;</span><br><span class="line">      APP_DEBUG: $&#123;APP_DEBUG:-<span class="number">1</span>&#125;</span><br><span class="line">      APP_PATH: /var/www/satisfy</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">9000</span>:<span class="number">9000</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Build">Build</h3>
<ol>
<li>在 docker/php/ 目录下增加 gitlab 的 ssh id_rsa</li>
<li>docker-composer build</li>
</ol>
<div class="highlight-container" data-rel="Docker"><figure class="iseeu highlight docker"><table><tr><td class="code"><pre><span class="line"> $ docker-composer build</span><br><span class="line"> ...</span><br><span class="line"> ---&gt; <span class="number">8346930</span>c5d07</span><br><span class="line">Removing intermediate container e1af8c887943</span><br><span class="line">Step <span class="number">17</span>/<span class="number">17</span> : <span class="keyword">USER</span> www-data</span><br><span class="line"> ---&gt; Running in d77d9a8ca62b</span><br><span class="line"> ---&gt; <span class="number">8</span>bba196f3d47</span><br><span class="line">Removing intermediate container d77d9a8ca62b</span><br><span class="line">Successfully built <span class="number">8</span>bba196f3d47</span><br></pre></td></tr></table></figure></div>
<h2 id="三、配置satisfy">三、配置satisfy</h2>
<h3 id="vendor依赖下载">vendor依赖下载</h3>
<p>直接使用该镜像中的composer 进行依赖下载</p>
<div class="highlight-container" data-rel="Docker"><figure class="iseeu highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> --<span class="built_in">rm</span> -it -v <span class="variable">$PWD</span>:/var/www/app satisfy_php composer install -d /var/www/app</span></span><br></pre></td></tr></table></figure></div>
<p>提示输入配置选项可以直接回车跳过，后续手动修改</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/composer-private/image_d406ohIHKM.png"
                      class=""
                >
<h3 id="satis-初始化">satis 初始化</h3>
<h4 id="增加配置文件-satis-json">增加配置文件 satis.json</h4>
<div class="highlight-container" data-rel="Docker"><figure class="iseeu highlight docker"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;attson/repository&quot;</span>,</span><br><span class="line">    <span class="string">&quot;homepage&quot;</span>: <span class="string">&quot;http://composer.attson.com/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;repositories&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;vcs&quot;</span>,</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;ssh://git@&lt;gitlab.com/group/project&gt;.git&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;require-all&quot;</span>: true,</span><br><span class="line">    <span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;secure-http&quot;</span>: false</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;archive&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;directory&quot;</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">        <span class="string">&quot;format&quot;</span>: <span class="string">&quot;zip&quot;</span>,</span><br><span class="line">        <span class="string">&quot;skip-dev&quot;</span>: false,</span><br><span class="line">        <span class="string">&quot;prefix-url&quot;</span>: <span class="string">&quot;http://composer.attson.com/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="build-satis">build satis</h4>
<div class="highlight-container" data-rel="Docker"><figure class="iseeu highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> --<span class="built_in">rm</span> -it -v <span class="variable">$PWD</span>:/var/www/app satisfy_php php /var/www/app/bin/satis build  /var/www/app/satis.json /var/www/app/public -vvv</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Writing packages.json</span><br><span class="line">Pruning include directories</span><br><span class="line">Writing web view</span><br></pre></td></tr></table></figure></div>
<h3 id="satisfy配置">satisfy配置</h3>
<h4 id="修改-config-parameters-yml">修改 config/parameters.yml</h4>
<div class="highlight-container" data-rel="Docker"><figure class="iseeu highlight docker"><table><tr><td class="code"><pre><span class="line">parameters:</span><br><span class="line">    secret: &lt;any strings&gt;</span><br><span class="line">    satis_filename: <span class="string">&#x27;%kernel.project_dir%/satis.json&#x27;</span></span><br><span class="line">    satis_log_path: <span class="string">&#x27;%kernel.project_dir%/var/satis&#x27;</span></span><br><span class="line">    gitlab.secret: &lt;webhook.token&gt;</span><br><span class="line">    admin.auth: true</span><br><span class="line">    admin.users:</span><br><span class="line">        admin:</span><br><span class="line">            password: &lt;plaintext&gt;</span><br><span class="line">            roles:</span><br><span class="line">                - ROLE_ADMIN</span><br><span class="line">    composer.home: <span class="string">&#x27;%kernel.project_dir%/var/composer&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p><a class="link"   href="https://github.com/ludofleury/satisfy/blob/master/config/security.yml" >https://github.com/ludofleury/satisfy/blob/master/config/security.yml <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>
默认密码使用的是明文方式</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/composer-private/image_Y7nrAZFoCu.png"
                      class=""
                >
<h4 id="启动服务">启动服务</h4>
<div class="highlight-container" data-rel="Docker"><figure class="iseeu highlight docker"><table><tr><td class="code"><pre><span class="line">docker-composer up -d</span><br></pre></td></tr></table></figure></div>
<h3 id="nginx-配置">nginx 配置</h3>
<div class="highlight-container" data-rel="Docker"><figure class="iseeu highlight docker"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen        <span class="number">80</span>;</span><br><span class="line">    server_name    composer.attson.com;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/composer/access.log;</span><br><span class="line">    error_log /var/log/nginx/composer/error_log;</span><br><span class="line"></span><br><span class="line">    root   /var/www/satisfy/public;</span><br><span class="line">    index index.html index.php;</span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^(.+\.php)(.*) &#123;</span><br><span class="line">        try_files $uri /index.php =<span class="number">404</span>;</span><br><span class="line"></span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(.*)$;</span><br><span class="line">        fastcgi_pass <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9000</span>;</span><br><span class="line"></span><br><span class="line">        fastcgi_param PATH_INFO $fastcgi_path_info;</span><br><span class="line">        <span class="comment"># fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;</span></span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="四、验证">四、验证</h2>
<h3 id="访问地址">访问地址</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/composer-private/image_AuHbRj7-fo.png"
                      class=""
                >
<h3 id="访问-admin-configuration">访问 admin/configuration</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/composer-private/image_vo4axt7ZmP.png"
                      class=""
                >
<p>用户名密码 在 parameters.yml 配置文件</p>
<h3 id="gitlab-webhook">gitlab webhook;</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/composer-private/image_K0Pz3doYO3.png"
                      class=""
                >
<p>webhook 配置完后可以test</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/composer-private/image_uncVKUkl8y.png"
                      class=""
                >
<p>不出意外的话，就全部搭好了</p>
<h2 id="五、重新拉取">五、重新拉取</h2>
<p>可以通过删除所有文件，清理无效的版本。（如果仓库太多的话，还是不要这么操作，全部拉取比较耗时）</p>
<div class="highlight-container" data-rel="Docker"><figure class="iseeu highlight docker"><table><tr><td class="code"><pre><span class="line">rm -rf public/dist</span><br><span class="line"></span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> --<span class="built_in">rm</span> -it -v <span class="variable">$PWD</span>:/var/www/app satisfy_php php /var/www/app/bin/satis build  /var/www/app/satis.json /var/www/app/public -vvv</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意 public 的文件权限</span></span><br><span class="line">chown -R www-data:www-data public</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>example</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Gitalk 评论自动初始化</title>
    <url>/p/gitalk-init.html</url>
    <content><![CDATA[<h1>Hexo Gitalk 评论自动初始化</h1>
<h2 id="背景">背景</h2>
<p>如果使用 Gitalk 评论插件，需要作者为每篇文章手动操作一下初始化，生成对应文章的issue，才能进行评论。</p>
<p>偷懒的程序员当然不喜欢这么繁琐的流程，所以需要一个自动化工具</p>
<h2 id="自动化实现流程">自动化实现流程</h2>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/gitalk-init/workflows.png"
                      class="" title="img.png"
                >
<h2 id="执行效果">执行效果</h2>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/gitalk-init/result.png"
                      class="" title="img.png"
                >
<h2 id="具体代码">具体代码</h2>
<p><a class="link"   href="https://github.com/attson/hexo-gitalk-init" >https://github.com/attson/hexo-gitalk-init <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>无需安装其他的依赖，让你的hexo项目更干净</li>
<li>不需要依赖或修改sitemap</li>
<li>更适合自动化</li>
<li>代码强迫症福音 no any warning</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> config = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fs.<span class="title function_">existsSync</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;gitalk_init.json&#x27;</span>))) &#123;</span><br><span class="line">    config = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;gitalk_init.json&#x27;</span>)).<span class="title function_">toString</span>(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(config).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> value = config[key];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> reg = <span class="regexp">/&#123;process\.env\.[a-zA-Z_\-&#125;]*/gm</span></span><br><span class="line"></span><br><span class="line">        value.<span class="title function_">match</span>(reg).<span class="title function_">forEach</span>(<span class="function"><span class="params">match</span> =&gt;</span> &#123;</span><br><span class="line">            config[key].<span class="title function_">replace</span>(match, process.<span class="property">env</span>[match.<span class="title function_">substring</span>(<span class="number">13</span>, match.<span class="property">length</span> - <span class="number">1</span>)])</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 配置信息</span></span><br><span class="line">    config = &#123;</span><br><span class="line">        <span class="comment">// GitHub repository 所有者，可以是个人或者组织。对应Gitalk配置中的owner</span></span><br><span class="line">        <span class="attr">username</span>: process.<span class="property">env</span>.<span class="property">GITHUB_REPOSITORY_OWNER</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 储存评论issue的github仓库名，仅需要仓库名字即可。对应 Gitalk配置中的repo</span></span><br><span class="line">        <span class="attr">repo</span>: process.<span class="property">env</span>.<span class="property">GITALK_INIT_REPO</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从 GitHub 的 Personal access tokens 页面，点击 Generate new token</span></span><br><span class="line">        <span class="attr">token</span>: process.<span class="property">env</span>.<span class="property">GITALK_TOKEN</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否启用缓存，启用缓存会将已经初始化的数据写入配置的 outputCacheFile 文件，下一次直接通过缓存文件 outputCacheFile 判断</span></span><br><span class="line">        <span class="attr">enableCache</span>: process.<span class="property">env</span>.<span class="property">GITALK_INIT_CACHE</span> || <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 缓存文件输出的位置</span></span><br><span class="line">        <span class="attr">cacheFile</span>: process.<span class="property">env</span>.<span class="property">GITALK_INIT_CACHE_FILE</span> || path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./public/gitalk-init-cache.json&#x27;</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只用于获取缓存的来源，缓存仍然会写到 cacheFile. 读取优先级 cacheFile &gt; cacheRemote. 故cacheFile文件存在时，忽略 cacheRemote</span></span><br><span class="line">        <span class="attr">cacheRemote</span>: process.<span class="property">env</span>.<span class="property">GITALK_INIT_CACHE_REMOTE</span>,</span><br><span class="line">        <span class="comment">// 通过远程读取文件，这样就不需要在本地的博客源文件中保存(保存在静态站点的public中)</span></span><br><span class="line">        <span class="comment">// output 到 public 目的就是将文件放在静态站点里面，下一次构建时，可以从远程读取</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">postsDir</span>: process.<span class="property">env</span>.<span class="property">GITALK_INIT_POSTS_DIR</span> || <span class="string">&#x27;source/_posts&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">configInit</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">repo</span> === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        config.<span class="property">repo</span> = <span class="string">`<span class="subst">$&#123;config.username&#125;</span>.github.io`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">cacheRemote</span> === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        config.<span class="property">cacheRemote</span> = <span class="string">`https://<span class="subst">$&#123;config.repo&#125;</span>/gitalk-init-cache.json`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">configInit</span>(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&#x27;api.github.com&#x27;</span></span><br><span class="line"><span class="keyword">const</span> apiPath = <span class="string">&#x27;/repos/&#x27;</span> + config.<span class="property">username</span> + <span class="string">&#x27;/&#x27;</span> + config.<span class="property">repo</span> + <span class="string">&#x27;/issues&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> autoGitalkInit = &#123;</span><br><span class="line">    <span class="attr">gitalkCache</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">gitalkIdGenerator</span>: <span class="literal">null</span>,</span><br><span class="line">    getFiles (dir, files_) &#123;</span><br><span class="line">        files_ = files_ || [];</span><br><span class="line">        <span class="keyword">const</span> files = fs.<span class="title function_">readdirSync</span>(dir);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> files) &#123;</span><br><span class="line">            <span class="keyword">let</span> name = dir + <span class="string">&#x27;/&#x27;</span> + files[i];</span><br><span class="line">            <span class="keyword">if</span> (fs.<span class="title function_">statSync</span>(name).<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">getFiles</span>(name, files_);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (name.<span class="title function_">endsWith</span>(<span class="string">&#x27;.md&#x27;</span>)) &#123;</span><br><span class="line">                    files_.<span class="title function_">push</span>(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> files_;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">readItem</span>(<span class="params">file</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> fileStream = fs.<span class="title function_">createReadStream</span>(file);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">            <span class="attr">input</span>: fileStream,</span><br><span class="line">            <span class="attr">crlfDelay</span>: <span class="title class_">Infinity</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// Note: we use the crlfDelay option to recognize all instances of CR LF</span></span><br><span class="line">        <span class="comment">// (&#x27;\r\n&#x27;) in input.txt as a single line break.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> start = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> post = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> line <span class="keyword">of</span> rl) &#123;</span><br><span class="line">            <span class="keyword">if</span> (start === <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (line.<span class="title function_">trim</span>() === <span class="string">&#x27;---&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> items = line.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">                    <span class="keyword">if</span> ([<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>, <span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;comment&#x27;</span>].<span class="title function_">indexOf</span>(items[<span class="number">0</span>].<span class="title function_">trim</span>()) !== -<span class="number">1</span>) &#123;</span><br><span class="line">                        post[items[<span class="number">0</span>].<span class="title function_">trim</span>()] = items[<span class="number">1</span>].<span class="title function_">trim</span>()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (line.<span class="title function_">trim</span>() === <span class="string">&#x27;---&#x27;</span>) &#123;</span><br><span class="line">                    start = <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fileStream.<span class="title function_">close</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">keys</span>(post).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`gitalk: warn read empty from: <span class="subst">$&#123;file&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (post[<span class="string">&#x27;comment&#x27;</span>] === <span class="literal">false</span> || post[<span class="string">&#x27;comment&#x27;</span>] === <span class="string">&#x27;false&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`gitalk: ignore by comment = <span class="subst">$&#123;post[<span class="string">&#x27;comment&#x27;</span>]&#125;</span> : <span class="subst">$&#123;file&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(<span class="string">&#x27;title&#x27;</span> <span class="keyword">in</span> post)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`gitalk: ignore because the title miss: <span class="subst">$&#123;file&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(<span class="string">&#x27;date&#x27;</span> <span class="keyword">in</span> post)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`gitalk: ignore because the date miss: <span class="subst">$&#123;file&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> regex = <span class="regexp">/^\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; \d&#123;2&#125;$/gm</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(regex.<span class="title function_">test</span>(post[<span class="string">&#x27;date&#x27;</span>]))) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`gitalk: ignore because the date <span class="subst">$&#123;post[<span class="string">&#x27;date&#x27;</span>]&#125;</span> invalid: <span class="subst">$&#123;file&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// pathname /year/month/day/file_without_extend/</span></span><br><span class="line">        post[<span class="string">&#x27;pathname&#x27;</span>] = <span class="string">&#x27;/&#x27;</span> + post[<span class="string">&#x27;date&#x27;</span>].<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">10</span>).<span class="title function_">replace</span>(<span class="regexp">/[-|\s]/g</span>, <span class="string">&#x27;/&#x27;</span>) + <span class="string">`/<span class="subst">$&#123;path.basename(file, <span class="string">&#x27;.md&#x27;</span>)&#125;</span>/`</span></span><br><span class="line">        post[<span class="string">&#x27;desc&#x27;</span>] = post[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> post</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">readPosts</span>(<span class="params">dir</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> posts = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> file <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="title function_">getFiles</span>(dir)) &#123;</span><br><span class="line">            <span class="keyword">const</span> post = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">readItem</span>(file);</span><br><span class="line">            <span class="keyword">if</span> (post != <span class="literal">null</span>) &#123;</span><br><span class="line">                posts.<span class="title function_">push</span>(post)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> posts</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用github接口初始化</span></span><br><span class="line">    <span class="title function_">gitalkInitInvoke</span>(<span class="params">&#123;pathname, id, title, desc&#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> options = &#123;</span><br><span class="line">            <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;hostname&#x27;</span>: hostname,</span><br><span class="line">            <span class="string">&#x27;path&#x27;</span>: apiPath,</span><br><span class="line">            <span class="string">&#x27;headers&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;token &#x27;</span> + config.<span class="property">token</span>,</span><br><span class="line">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;User-Agent&#x27;</span>: config.<span class="property">username</span> + <span class="string">&#x27;/&#x27;</span> + config.<span class="property">repo</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;maxRedirects&#x27;</span>: <span class="number">20</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> link = <span class="string">`https://<span class="subst">$&#123;config.repo&#125;</span><span class="subst">$&#123;pathname&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建issue</span></span><br><span class="line">        <span class="keyword">const</span> reqBody = &#123;</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span>: title,</span><br><span class="line">            <span class="string">&#x27;labels&#x27;</span>: [<span class="string">&#x27;Gitalk&#x27;</span>, id],</span><br><span class="line">            <span class="string">&#x27;body&#x27;</span>: <span class="string">`[<span class="subst">$&#123;link&#125;</span>](<span class="subst">$&#123;link&#125;</span>&#125;)\r\n\r\n<span class="subst">$&#123;desc&#125;</span>`</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> req = https.<span class="title function_">request</span>(options, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> chunks = [];</span><br><span class="line"></span><br><span class="line">                res.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span> (<span class="params">chunk</span>) &#123;</span><br><span class="line">                    chunks.<span class="title function_">push</span>(chunk);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                res.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Buffer</span>.<span class="title function_">concat</span>(chunks).<span class="title function_">toString</span>())</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">resolve</span>([<span class="literal">false</span>, <span class="literal">true</span>]);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                res.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">resolve</span>([error, <span class="literal">false</span>]);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            req.<span class="title function_">write</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(reqBody))</span><br><span class="line"></span><br><span class="line">            req.<span class="title function_">end</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过github api 请求判断是否已经初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; id gitalk 初始化的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="type">Promise&lt;[boolean, boolean]&gt;</span>&#125; 第一个值表示是否出错，第二个值 false 表示没初始化， true 表示已经初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    getIsInitByGitHub (id) &#123;</span><br><span class="line">        <span class="keyword">const</span> options = &#123;</span><br><span class="line">            <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;hostname&#x27;</span>: hostname,</span><br><span class="line">            <span class="string">&#x27;path&#x27;</span>: apiPath + <span class="string">&#x27;?labels=Gitalk,&#x27;</span> + id,</span><br><span class="line">            <span class="string">&#x27;headers&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;token &#x27;</span> + config.<span class="property">token</span>,</span><br><span class="line">                <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">                <span class="comment">// https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#user-agent-required</span></span><br><span class="line">                <span class="string">&#x27;User-Agent&#x27;</span>: config.<span class="property">username</span> + <span class="string">&#x27;/&#x27;</span> + config.<span class="property">repo</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;maxRedirects&#x27;</span>: <span class="number">20</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> req = https.<span class="title function_">request</span>(options, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> chunks = [];</span><br><span class="line"></span><br><span class="line">                res.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span> (<span class="params">chunk</span>) &#123;</span><br><span class="line">                    chunks.<span class="title function_">push</span>(chunk);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                res.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">const</span> res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">Buffer</span>.<span class="title function_">concat</span>(chunks).<span class="title function_">toString</span>());</span><br><span class="line">                    <span class="keyword">if</span> (res.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="title function_">resolve</span>([<span class="literal">false</span>, <span class="literal">true</span>]);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="title function_">resolve</span>([<span class="literal">false</span>, <span class="literal">false</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                res.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">resolve</span>([error, <span class="literal">false</span>]);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            req.<span class="title function_">end</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据缓存，判断链接是否已经初始化</span></span><br><span class="line">    <span class="comment">// 第一个值表示是否出错，第二个值 false 表示没初始化， true 表示已经初始化</span></span><br><span class="line">    <span class="keyword">async</span> idIsInit (id) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!config.<span class="property">enableCache</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getIsInitByGitHub</span>(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果通过缓存查询到的数据是未初始化，则再通过请求判断是否已经初始化，防止多次初始化</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> cacheRes = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getIsInitByCache</span>(id)</span><br><span class="line">        <span class="keyword">if</span> (cacheRes === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(id + <span class="string">&#x27; 缓存不存在, 从github获取状态...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getIsInitByGitHub</span>(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [<span class="literal">false</span>, <span class="literal">true</span>];</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过远程地址获取缓存内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;Object&gt;</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">getRemoteCache</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> req = https.<span class="title function_">get</span>(config.<span class="property">cacheRemote</span>, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> chunks = [];</span><br><span class="line"></span><br><span class="line">                res.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span> (<span class="params">chunk</span>) &#123;</span><br><span class="line">                    chunks.<span class="title function_">push</span>(chunk);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                res.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">Buffer</span>.<span class="title function_">concat</span>(chunks).<span class="title function_">toString</span>()));</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                res.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">reject</span>(error);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            req.<span class="title function_">end</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过缓存判断是否已经初始化, 优先加载缓存文件，文件不存在则尝试从 cacheRemote 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; gitalkId 初始化的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="type">Promise&lt;boolean&gt;</span>&#125; false 表示没初始化， true 表示已经初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getIsInitByCache</span>(<span class="params">gitalkId</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">gitalkCache</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断缓存文件是否存在</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">gitalkCache</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">gitalkCache</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(config.<span class="property">cacheFile</span>).<span class="title function_">toString</span>(<span class="string">&#x27;utf-8&#x27;</span>));</span><br><span class="line"></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取缓存文件成功 &#x27;</span> + config.<span class="property">cacheFile</span>)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取缓存文件失败 &#x27;</span> + config.<span class="property">cacheFile</span> + <span class="string">&#x27; : &#x27;</span> + e.<span class="property">message</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (config.<span class="property">cacheRemote</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正在从 &#x27;</span> + config.<span class="property">cacheRemote</span> + <span class="string">&#x27; 读取文件&#x27;</span>)</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">gitalkCache</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getRemoteCache</span>()</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取缓存文件成功 &#x27;</span> + config.<span class="property">cacheRemote</span>)</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取缓存文件失败 &#x27;</span> + config.<span class="property">cacheRemote</span> + <span class="string">&#x27; : &#x27;</span> + e.<span class="property">message</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="keyword">function</span> (<span class="params">gitalkId</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!that.<span class="property">gitalkCache</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> !!that.<span class="property">gitalkCache</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">&#123;id: itemId&#125;</span>) =&gt;</span> (itemId === gitalkId));</span><br><span class="line">        &#125;(gitalkId));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; fileName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; content 内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> <span class="variable">flag</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">write</span>(<span class="params">fileName, content, flag = <span class="string">&#x27;w+&#x27;</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            fs.<span class="title function_">open</span>(fileName, flag, <span class="keyword">function</span> (<span class="params">err, fd</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>([err, <span class="literal">false</span>]);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                fs.<span class="title function_">writeFile</span>(fd, content, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>([err, <span class="literal">false</span>]);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    fs.<span class="title function_">close</span>(fd, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                            <span class="title function_">resolve</span>([err, <span class="literal">false</span>]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="title function_">resolve</span>([<span class="literal">false</span>, <span class="literal">true</span>]);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 生成 GitalkId</span></span><br><span class="line">    <span class="title function_">getGitalkId</span>(<span class="params">pathname, title, desc, date</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">gitalkIdGenerator</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fs.<span class="title function_">existsSync</span>(<span class="string">&quot;get-gitalk-id.js&quot;</span>)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">gitalkIdGenerator</span> = <span class="built_in">require</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;get-gitalk-id.js&quot;</span>)).<span class="property">getGitalkId</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">gitalkIdGenerator</span> = <span class="keyword">function</span> (<span class="params">pathname</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> id = pathname</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// github issue label max 50</span></span><br><span class="line">                    <span class="keyword">if</span> (id.<span class="property">length</span> &gt; <span class="number">50</span>) &#123;</span><br><span class="line">                        id = id.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">50</span> - <span class="number">3</span>) + <span class="string">&#x27;...&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> id</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">gitalkIdGenerator</span>(pathname, title, desc, date)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">start</span>(<span class="params">postDir</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> posts = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">readPosts</span>(postDir);</span><br><span class="line">        <span class="comment">// 报错的数据</span></span><br><span class="line">        <span class="keyword">const</span> errorData = [];</span><br><span class="line">        <span class="comment">// 已经初始化的数据</span></span><br><span class="line">        <span class="keyword">const</span> initializedData = [];</span><br><span class="line">        <span class="comment">// 成功初始化数据</span></span><br><span class="line">        <span class="keyword">const</span> successData = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> posts) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;pathname, title, desc, date&#125; = item;</span><br><span class="line">            <span class="keyword">const</span> id = <span class="variable language_">this</span>.<span class="title function_">getGitalkId</span>(pathname, title, desc, date);</span><br><span class="line">            <span class="keyword">const</span> [err, res] = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">idIsInit</span>(id);</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Error: 查询评论异常 [ <span class="subst">$&#123;title&#125;</span> ] , 信息：`</span>, err || <span class="string">&#x27;无&#x27;</span>);</span><br><span class="line">                errorData.<span class="title function_">push</span>(&#123;</span><br><span class="line">                    ...item,</span><br><span class="line">                    <span class="attr">info</span>: <span class="string">&#x27;查询评论异常&#x27;</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res === <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`--- Gitalk 已经初始化 --- [ <span class="subst">$&#123;title&#125;</span> ] `</span>);</span><br><span class="line">                initializedData.<span class="title function_">push</span>(&#123;id&#125;);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Gitalk 初始化开始... [ <span class="subst">$&#123;title&#125;</span> ] `</span>);</span><br><span class="line">            <span class="keyword">const</span> [e, r] = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">gitalkInitInvoke</span>(&#123;</span><br><span class="line">                id,</span><br><span class="line">                pathname,</span><br><span class="line">                title,</span><br><span class="line">                desc</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (e || !r) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Error: Gitalk 初始化异常 [ <span class="subst">$&#123;title&#125;</span> ] , 信息：`</span>, e || <span class="string">&#x27;无&#x27;</span>);</span><br><span class="line">                errorData.<span class="title function_">push</span>(&#123;</span><br><span class="line">                    ...item,</span><br><span class="line">                    <span class="attr">info</span>: <span class="string">&#x27;初始化异常&#x27;</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            successData.<span class="title function_">push</span>(&#123;</span><br><span class="line">                id,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Gitalk 初始化成功! [ <span class="subst">$&#123;title&#125;</span> ] `</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 空输出，用于换行</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------- 运行结果 ---------&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 空输出，用于换行</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (errorData.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`报错数据： <span class="subst">$&#123;errorData.length&#125;</span> 条。`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(errorData, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`本次成功： <span class="subst">$&#123;successData.length&#125;</span> 条。`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入缓存</span></span><br><span class="line">        <span class="keyword">if</span> (config.<span class="property">enableCache</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`写入缓存： <span class="subst">$&#123;(initializedData.length + successData.length)&#125;</span> 条，已初始化 <span class="subst">$&#123;initializedData.length&#125;</span> 条，本次成功： <span class="subst">$&#123;successData.length&#125;</span> 条。参考文件 <span class="subst">$&#123;config.cacheFile&#125;</span>。`</span>);</span><br><span class="line">            <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">write</span>(config.<span class="property">cacheFile</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(initializedData.<span class="title function_">concat</span>(successData), <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`已初始化： <span class="subst">$&#123;initializedData.length&#125;</span> 条。`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">autoGitalkInit.<span class="title function_">start</span>(config.<span class="property">postsDir</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>));</span><br></pre></td></tr></table></figure></div>
<h2 id="使用方式">使用方式</h2>
<h3 id="手动执行">手动执行</h3>
<h4 id="执行本地文件">执行本地文件</h4>
<ol>
<li>在项目根目录新增js文件 gitalk_init.js</li>
<li>执行命令</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">GITHUB_REPOSITORY_OWNER=attson GITALK_TOKEN=&lt;GITALK_TOKEN&gt; node gitalk_init.js</span><br></pre></td></tr></table></figure></div>
<h4 id="或者使用-release-文件">或者使用 release 文件</h4>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">GITHUB_REPOSITORY_OWNER=attson GITALK_TOKEN=&lt;GITALK_TOKEN&gt; curl -sL https://raw.githubusercontent.com/attson/hexo-gitalk-init/v1.0.0/gitalk_init.js | node</span><br></pre></td></tr></table></figure></div>
<h3 id="github-workflows-中集成">github workflows 中集成</h3>
<h4 id="执行本地文件-2">执行本地文件</h4>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GITALK_INIT</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">GITALK_TOKEN=$&#123;&#123;</span> <span class="string">secrets.BUILD_GITHUB_IO_GITALK</span> <span class="string">&#125;&#125;</span> <span class="string">node</span> <span class="string">gitalk_init.js</span></span><br></pre></td></tr></table></figure></div>
<h4 id="或者使用-release-文件-2">或者使用 release 文件</h4>
<p>ci 中使用，推荐增加 md5 值校验</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GITALK_INIT</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    if [[ $(wget https://raw.githubusercontent.com/attson/hexo-gitalk-init/v1.0.2/gitalk_init.js &amp;&amp; cat gitalk_init.js | md5sum | cut -d &#x27; &#x27; -f 1) = &quot;dec43e4fe531f8006bd0606a76a87973&quot; ]]; then</span></span><br><span class="line"><span class="string">      GITALK_TOKEN=$&#123;&#123; secrets.BUILD_GITHUB_IO_GITALK &#125;&#125; node gitalk_init.js</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">      echo &quot;check md5 fail.&quot;</span></span><br><span class="line"><span class="string">      exit 1</span></span><br><span class="line"><span class="string">    fi</span></span><br></pre></td></tr></table></figure></div>
<h2 id="参数说明">参数说明</h2>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
<th>默认值（env存在，则默认使用env的值）</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>username</td>
<td>GitHub repository 所有者 (必填)</td>
<td>process.env.GITHUB_REPOSITORY_OWNER</td>
<td>GitHub repository 所有者，可以是个人或者组织。对应Gitalk配置中的owner</td>
</tr>
<tr>
<td>repo</td>
<td>储存评论issue的github仓库名</td>
<td>process.env.GITALK_INIT_REPO     <br/> ||        <code>$&#123;this.username&#125;.github.io</code></td>
<td>储存评论issue的github仓库名，仅需要仓库名字即可。对应 Gitalk配置中的repo</td>
</tr>
<tr>
<td>token</td>
<td>GitHub 的 Personal access token (必填)</td>
<td>process.env.GITALK_TOKEN</td>
<td>从 GitHub 的 <a class="link"   href="https://github.com/settings/tokens" >Personal access tokens <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 页面，点击 <a class="link"   href="https://github.com/settings/tokens/new" >Generate new token <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
</tr>
<tr>
<td>enableCache</td>
<td>是否启用缓存</td>
<td>process.env.GITALK_INIT_CACHE || true</td>
<td>是否启用缓存，启用缓存会将已经初始化的数据写入配置的 outputCacheFile 文件，下一次直接通过缓存文件 outputCacheFile 判断</td>
</tr>
<tr>
<td>cacheFile</td>
<td>缓存文件输出的位置</td>
<td>process.env.GITALK_INIT_CACHE_FILE   <br/> || path.join(__dirname, ‘./public/gitalk-init-cache.json’)</td>
<td></td>
</tr>
<tr>
<td>cacheRemote</td>
<td>获取缓存的远程地址</td>
<td>process.env.GITALK_INIT_CACHE_REMOTE <br/> || <code>https://$&#123;this.repo&#125;/gitalk-init-cache.json</code></td>
<td>只用于获取缓存的来源，缓存仍然会写到 cacheFile. 读取优先级 cacheFile &gt; cacheRemote. 故cacheFile文件存在时，忽略 cacheRemote</td>
</tr>
<tr>
<td>postsDir</td>
<td>hexo posts 文件路径</td>
<td>process.env.GITALK_INIT_POSTS_DIR <br/> || ‘source/_posts’</td>
<td></td>
</tr>
</tbody>
</table>
<ol>
<li>所有参数支持使用环境变量配置 (推荐)</li>
<li>所有参数支持使用自定义的 gitalk_init.json 文件
<ul>
<li>配置文件中value支持环境变量占位 </li>
</ul>
</li>
</ol>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;attson&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;&#123;process.env.GITALK_TOKEN&#125;&#125;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>example</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Golang 泛型实现的简单容器</title>
    <url>/p/golang-container-base-genericity.html</url>
    <content><![CDATA[<h2 id="概述">概述</h2>
<p>golang 1.18 有泛型之后，对业务代码的编写友好很多，可以更方便的实现一些不限类型的通用库。</p>
<p>最近尝试在 golang 中实现 ddd 的分层抽象，离不开注册和构建概念，如果没有泛型，那就需要很多强制业务代码中的类型转换代码，看起来不太优雅。</p>
<p>所以拿泛型实现了一个简单的容器，很方便解决了这个问题。</p>
<h2 id="使用示例">使用示例</h2>
<h2 id="使用示例-2">使用示例</h2>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/attson/container&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Test <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Test)</span></span> Key() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> t.Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">	Key() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="为结构体注册一个构建函数">为结构体注册一个构建函数</h3>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 为结构体注册一个构建函数</span><br><span class="line">container.Register[Test](func() any &#123;</span><br><span class="line">    return Test&#123;</span><br><span class="line">        Name: &quot;test&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 通过容器构建实例</span><br><span class="line">v1 := container.Make[Test]()</span><br><span class="line">println(v1.Name) // test</span><br></pre></td></tr></table></figure></div>
<h3 id="为结构体指针注册一个构建函数">为结构体指针注册一个构建函数</h3>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 为结构体指针注册一个构建函数</span><br><span class="line">container.Register[*Test](func() any &#123;</span><br><span class="line">    return &amp;Test&#123;</span><br><span class="line">        Name: &quot;test_pointer&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 通过容器构建实例</span><br><span class="line">v2 := container.Make[*Test]()</span><br><span class="line">println(v2.Name) // test_pointer</span><br></pre></td></tr></table></figure></div>
<h3 id="为接口注册一个构建函数">为接口注册一个构建函数</h3>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 为接口注册一个构建函数</span><br><span class="line">container.Register[I](func() any &#123;</span><br><span class="line">    return Test&#123;</span><br><span class="line">        Name: &quot;test_interface&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 通过容器构建实例</span><br><span class="line">v3 := container.Make[I]()</span><br><span class="line">println(v3.Key()) // test_interface</span><br></pre></td></tr></table></figure></div>
<h3 id="在容器中设置一个实例-单例">在容器中设置一个实例(单例)</h3>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在容器中设置一个实例(单例)</span><br><span class="line">container.Set[Test](Test&#123;</span><br><span class="line">    Name: &quot;test_set&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">// 通过容器获取实例</span><br><span class="line">v4 := container.Get[Test]()</span><br><span class="line">println(v4.Name) // test_set</span><br><span class="line">	</span><br></pre></td></tr></table></figure></div>
<h3 id="在容器中设置一个指针实例">在容器中设置一个指针实例</h3>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在容器中设置一个指针实例</span><br><span class="line">container.Set[*Test](&amp;Test&#123;</span><br><span class="line">    Name: &quot;test_pointer_set&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">// 通过容器获取实例</span><br><span class="line">v5 := container.Get[*Test]()</span><br><span class="line">println(v5.Name) // test_pointer_set</span><br></pre></td></tr></table></figure></div>
<h3 id="在容器中设置一个接口实例">在容器中设置一个接口实例</h3>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在容器中设置一个接口实例</span><br><span class="line">container.Set[I](Test&#123;</span><br><span class="line">    Name: &quot;test_interface_set&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">// 通过容器获取实例</span><br><span class="line">v6 := container.Get[I]()</span><br><span class="line">println(v6.Key()) // test_interface_set</span><br></pre></td></tr></table></figure></div>
<h2 id="总结">总结</h2>
<p>总体使用起来简单了很多，这里针对比较复杂的业务项目，需要抽象实现分离等规范的项目</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>如何快速学习一门新编程语言</title>
    <url>/p/how-to-learn-a-new-program-language.html</url>
    <content><![CDATA[<h2 id="概述">概述</h2>
<p>笔者目前工作已有6个年头，接触过PHP、golang、java/kotlin、js/ts、.net等，对这几个语言都有一些项目开发经验，最早是在php上扎根。本文谈谈自己对新语言学习方向的一些看法。</p>
<h2 id="学习方向">学习方向</h2>
<h3 id="语法">语法</h3>
<p>大多数语言的语法结构和思想，基本是和c语言相似的，包含<strong>变量声明，类型定义，结构体/类，定义，分支条件，循环结构等</strong>。所以当你熟悉一门语言之后，再去看其他语言的代码，基本都是能看懂的。千万不要有固有思想，认为我只会php，去看js就一点都看不下去，这种心理上的矛盾，会让你在学习新语言的路上难度提升。</p>
<p>当然每个语言有一定特有的语法糖，比如 go 的 defer，kotlin 的各种魔法函数，这些其实不是特别重要，前期只要知道有这么个东西和它的作用就可以了。</p>
<h3 id="常用的包">常用的包</h3>
<p>每个语言都有自己的内置函数和标准库，在项目中常用的有<strong>字符串处理，数组处理，集合处理，日志库，序列化库，配置管理，文件读写，类型转换</strong>，熟悉这些基本库，对上手开发是比较有帮助的，毕竟真实项目很难离开这些。</p>
<p>进阶的库可以有所了解，比如<strong>网络io处理，反射，信号处理等</strong>，这些基本会在较为底层的开发领域会遇到，基本了解即可</p>
<h3 id="开发框架">开发框架</h3>
<p>一个复杂的项目，很难离开开发框架，使用这些框架，能够帮助我们快速搭建一个规范成熟的项目。通过常用框架去入门和熟悉一门语言，也是一个好的方式。<br>
比如java的spring系列，php的laravel系列，js的vue/react系列。当然前端还分为ui框架，目前国内常用的elementui，在web项目里面就比较常见。</p>
<p>在公司开发项目，基本都会选择一个合适的框架，提升开发效率和方便技术管理。</p>
<h3 id="中间件">中间件</h3>
<p>一个项目通常都会与其他组件一起协作，不同语言与组件的交互，会有不同的客户端程序，比如mysql在java中的jdbc，mybatis，在php中的pdo，laravel-orm，都是一个常规项目所需要和选择的。<br>
一般的后端项目会涉及如<strong>mysql、redis、mongodb、rabbitmq等</strong>，后端大多数都是与数据进行交互，所以数据相关的中间件需要熟悉。</p>
<h3 id="包管理器">包管理器</h3>
<p>成熟的项目同样离不开包管理器。在项目实际开发中，会运用到大量的第三方库，通过使用这些第三方优质的库，能够大大减少我们的开发时间，所以如何去导入和版本控制，<br>
是每个项目都需要考虑的。比如php中使用composer管理，java中有grade/maven，js中有npm、yarn、pnpm。不同的管理器，会有不同的优化点，这个也是需要去了解如何使用的。</p>
<h3 id="构建部署">构建部署</h3>
<p>目前构建打包基本都是和包管理器绑定的，通过包管理器命令，就可以将可运行的项目包构建出来，当然像php这样的脚本语言，代码文件本身就可以直接运行，也没有打包这层概念。<br>
不同的语言的部署方式会有较大的差异，比如前端项目通常部署在oss文件服务中，后端项目可以部署在主机上，也可以使用容器化技术部署，还需要考虑机器资源，参数调优等问题。</p>
<h3 id="进阶">进阶</h3>
<p>完成上述方向学习后，进阶方向还可以熟悉该语言的<strong>编译运行，线程模型，内存模型，设计思想等</strong>，加强对该语言的理解。</p>
<h2 id="总结">总结</h2>
<p>在已经有编程语言的基础上去学习一门新语言，通常是比较容易的，最难的我认为还是<strong>摆脱个人的偏见</strong>，比如php是世界上最好的语言。<br>
当思想固化之后，就很难接受新的东西了，每个语言都有它的优缺点，请勿将自己牢牢定位在xxx语言工程师，路不要走窄了~</p>
<h2 id="谈谈对多语言开发者的想法">谈谈对多语言开发者的想法</h2>
<p>最后在谈谈对多语言开发者的想法，从个人的应聘和面试经验来看，面试官还是倾向于应聘者只在一门语言上精通。一个有php一年+java一年的经验，另一个有java两年的经验，在java工程师面试上，<br>
毋庸置疑的是后者更占优势。至少在当前工作环境下，公司对语言开发岗位的定位通常是比较明确的。</p>
<p>从个人对技术理解的方向来看，程序员的价值应该在设计模式，领域建模，网络通信等通用的技能。语言只是个工具，熟悉多门语言的设计思想，是能够让开发者跳出基础开发的瓶颈的。所以在有机会的情况下，<br>
学习多门语言总不是一件坏事情，当然为了保住当前的饭碗，请不要放弃在主语言上持续学习。</p>
]]></content>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 系列更换软件源</title>
    <url>/p/linux-source-mirror-change.html</url>
    <content><![CDATA[<h3 id="1-ubuntu-阿里云源">1. ubuntu-阿里云源</h3>
<h4 id="要注意-etc-apt-sources-list-默认的是什么">要注意/etc/apt/sources.list 默认的是什么</h4>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># grep -Ev &quot;^$|[#]&quot; 过滤掉空行和#开头的</span><br><span class="line">cat /etc/apt/sources.list | grep -Ev &quot;^$|#&quot;</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./linux-source-mirror-change/source-list.png"
                      alt="list"
                ></p>
<p>看到域名都是 <code>cn.archive.ubuntu.com</code>; 可以手动将这些都改成阿里云的源 <code>mirrors.aliyun.com</code><br>
也可以通过下面的命令直接替换</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 万事先备份</span><br><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.bk</span><br><span class="line">sed -i s/cn.archive.ubuntu.com/mirrors.aliyun.com/g /etc/apt/sources.list</span><br><span class="line"># 验证一波</span><br><span class="line">cat /etc/apt/sources.list | grep -Ev &quot;^$|#&quot;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mac php + xdebug安装</title>
    <url>/p/mac-php-xdebug.html</url>
    <content><![CDATA[<h1>mac php + xdebug安装</h1>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">背景：之前用的自带php 配置的xdebug，突然发现不能用了，error.log 也不记录在之前的日志文件里了</span><br><span class="line">查看php -v 成了7.1 的了，一脸xx</span><br><span class="line"></span><br><span class="line">最后进/usr/bin 看，php确实变成了7.1</span><br><span class="line">/ect 下面之前配置的php.ini 也不见了</span><br><span class="line">最后在查问题时，看到一篇https://www.cnblogs.com/ailhc/p/7398479.html，提到mac在系统更新</span><br><span class="line">时候，会将自带的配置给还原</span><br><span class="line">然后便想到，放弃自带php，再见</span><br></pre></td></tr></table></figure></div>
<h4 id="首先">首先</h4>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//因为自带的php可能其他地方会用到，就不删除了，重新装一个</span><br><span class="line">brew update</span><br><span class="line">brew search php</span><br><span class="line">brew install php71</span><br><span class="line"></span><br><span class="line">安装后查看下php -v php-fpm -v 是不是最新的7.1.11 mac最新自带 7.1.7</span><br><span class="line">如果不是查看环境变量</span><br><span class="line">echo $PATH </span><br><span class="line">看看/usr/local/bin/和/usr/local/sbin 是不是写在/usr/bin和/usr/sbin之前</span><br><span class="line">没有则添加，不是则修改</span><br></pre></td></tr></table></figure></div>
<h4 id="安装个php-version-有需要安装多版本的可以安装">安装个php-version(有需要安装多版本的可以安装)</h4>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">brew install php-version</span><br><span class="line">source $(brew --prefix php-version)/php-version.sh &amp;&amp; php-version</span><br><span class="line">php-version 查看当前安装的版本(自带的是看不到的?)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 只能在当前终端有效, 新切换的终端输入php -v不变，但是我们只要在切换过的终端，</span></span><br><span class="line"><span class="comment"> * 启动php-fpm，后台运行的就是切换后的fpm。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">php-version <span class="number">7.1</span>.<span class="number">11</span>  <span class="comment">//更换版本</span></span><br></pre></td></tr></table></figure></div>
<h4 id="配置php-php-fpm">配置php php-fpm</h4>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//brew 安装的php，配置文件在/usr/loacl/etc/php</span><br><span class="line">cd /usr/loacl/etc/php</span><br><span class="line">//找到对应的版本</span><br><span class="line">cd 7.1</span><br><span class="line">//vim php.ini 没有则增加</span><br><span class="line">display_errors = off //不显示错误信息(不输出到页面或屏幕上)</span><br><span class="line">log_errors = On</span><br><span class="line">error_log = &quot;/usr/local/lnmp/php/var/log/error_log&quot;(自定义，绝对路径)</span><br><span class="line">error_reporting=E_ALL</span><br><span class="line">date.timezone = PRC</span><br><span class="line"></span><br><span class="line">//vim php-fpm.conf 没有则增加</span><br><span class="line">catch_workers_output = yes</span><br><span class="line">error_log = &quot;/usr/local/lnmp/php/var/log/error_log&quot;(自定义，绝对路径)</span><br><span class="line"></span><br><span class="line">//注意!</span><br><span class="line">php_admin_value[error_log]参数会覆盖php.ini中的error_log 参数</span><br><span class="line"></span><br><span class="line">最终按phpinfo 里的error_log配置为准</span><br></pre></td></tr></table></figure></div>
<h4 id="启动php-fpm">启动php-fpm</h4>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">php-fpm -v  先查看是不是要启动的版本</span><br><span class="line">sudo php-fpm</span><br><span class="line"></span><br><span class="line">//出现问题 php-fpm 并不在后台运行</span><br><span class="line">终端输出</span><br><span class="line">NOTICE: fpm is running, pid 42540</span><br><span class="line">NOTICE: ready to handle connections</span><br><span class="line"></span><br><span class="line">结束php-fpm</span><br><span class="line">sudo killall php-fpm</span><br><span class="line">修改php-fpm.conf</span><br><span class="line">daemonize = yes  (如果设置为no, fpm会运行在前台)</span><br><span class="line">再启动</span><br><span class="line"></span><br><span class="line">在页面输出phpinfo()查看配置</span><br></pre></td></tr></table></figure></div>
<h4 id="安装Xdebug">安装Xdebug</h4>
<p>寻找对应php版本的xdebug版本</p>
<ol>
<li>
<p>先将info输出到一个文件<br>
php -i &gt; info.txt</p>
</li>
<li>
<p>打开info.txt 复制所有内容</p>
</li>
<li>
<p>打开寻找合适xdebug的页面https://xdebug.org/wizard.php</p>
</li>
<li>
<p>将刚才复制的内容粘贴至提供的输入框中 点击Analyse my phpinfo() output 就会显示下载安装步骤，<br>
跟着一步步执行就好了</p>
</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">出现问题 配置之后php -v | php -m 显示</span><br><span class="line">Zend OPcache requires Zend Engine API version 220090626.</span><br><span class="line">The Zend Engine API version 220100525 which is installed, is newer.</span><br><span class="line">Contact Zend Technologies at http://www.zend.com/ for a later version of Zend OPcache.</span><br><span class="line"></span><br><span class="line">解决办法，重新配置xdebug，删除之前的xdebug.so(移动过去的那个) 和 xdebug文件夹，</span><br><span class="line">重新解压</span><br><span class="line">按照上面执行步骤，在执行phpize 时候，使用绝对路径，php所在的路径 </span><br><span class="line">/usr/local/Cellar/php71/7.1.11_22/bin/phpize</span><br></pre></td></tr></table></figure></div>
<h4 id="配置xdebug">配置xdebug</h4>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">xdebug.remote_enable = 1</span><br><span class="line">xdebug.remote_handler = &quot;dbgp&quot;</span><br><span class="line">xdebug.remote_host = &quot;127.0.0.1&quot;</span><br><span class="line">xdebug.remote_port = 9001 </span><br><span class="line">xdebug.remote_log = &quot;/var/log/php-fpm/xdebug.log&quot;</span><br></pre></td></tr></table></figure></div>
<h4 id="参考文章">参考文章</h4>
<ul>
<li>
<p>php error_log配置 <a class="link"   href="http://www.jb51.net/article/31499.htm" >http://www.jb51.net/article/31499.htm <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li>
<p>php-fpm 配置详解 <a class="link"   href="https://www.cnblogs.com/jonsea/p/5522018.html" >https://www.cnblogs.com/jonsea/p/5522018.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li>
<p>php-version 安装 <a class="link"   href="http://www.jianshu.com/p/bee30e411b00" >http://www.jianshu.com/p/bee30e411b00 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li>
<p>xdbug配置 <a class="link"   href="https://www.awaimai.com/1290.html" >https://www.awaimai.com/1290.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <a class="link"   href="https://www.cnblogs.com/purelightme/p/6605648.html" >https://www.cnblogs.com/purelightme/p/6605648.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>example</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>在macos下使用virtual-box安装ubuntu server</title>
    <url>/p/macos-vbox-ubuntu.html</url>
    <content><![CDATA[<h2 id="使用版本">使用版本</h2>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">MacOs Catalian 10.15.6</span><br><span class="line">VirtalBox 6.1.16</span><br><span class="line">Ubuntu Server ubuntu-20.04.1-live-server-amd64.iso</span><br></pre></td></tr></table></figure></div>
<h2 id="一、安装VirtualBox">一、安装VirtualBox</h2>
<h3 id="下载">下载</h3>
<ul>
<li>下载地址: <a class="link"   href="https://www.virtualbox.org/wiki/Downloads" >https://www.virtualbox.org/wiki/Downloads <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 国内下载比较慢，推荐借助神秘力量</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./macos-vbox-ubuntu/1603375584584.jpg"
                      alt="download-vbox"
                ></p>
<ul>
<li>不要忘记检查一下sha256值 <a class="link"   href="https://www.virtualbox.org/download/hashes/6.1.16/SHA256SUMS" >https://www.virtualbox.org/download/hashes/6.1.16/SHA256SUMS <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">shasum -a 256 VirtualBox-6.1.16-140961-OSX.dmg</span><br><span class="line">d7df0f05d9a9e7cba50ea01da264ac20948b1c9c0e0cccd2d628085c9f434d45  VirtualBox-6.1.16-140961-OSX.dmg</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h3 id="安装">安装</h3>
<ul>
<li>
<p>像正常安装软件一样即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./macos-vbox-ubuntu/1603376858313.jpg"
                      alt="install-vbox"
                ></p>
</li>
<li>
<p>相关需要的权限都给</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./macos-vbox-ubuntu/1603377152373.jpg"
                      alt="install-vbox"
                ></p>
</li>
</ul>
<h2 id="二、安装ubuntu-server">二、安装ubuntu server</h2>
<h3 id="下载ubuntu-server">下载ubuntu server</h3>
<ul>
<li>下载地址: <a class="link"   href="https://ubuntu.com/download/server" >https://ubuntu.com/download/server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h3 id="安装ubuntu-server">安装ubuntu server</h3>
<h4 id="Step-1-打开VirBox，点击新建">Step 1. 打开VirBox，点击新建</h4>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./macos-vbox-ubuntu/1603377642251.jpg"
                      alt="install-ubuntu1"
                ></p>
<h4 id="Step-2-配置基础信息和内存">Step 2. 配置基础信息和内存</h4>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./macos-vbox-ubuntu/1603377649152.jpg"
                      alt="install-ubuntu2"
                ></p>
<h4 id="Step-3-配置虚拟硬盘">Step 3. 配置虚拟硬盘</h4>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./macos-vbox-ubuntu/1603377652616.jpg"
                      alt="install-ubuntu3"
                ></p>
<h4 id="Step-4-点击存储，添加盘片-设置镜像文件">Step 4. 点击存储，添加盘片(设置镜像文件)</h4>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./macos-vbox-ubuntu/iso1.jpg"
                      alt="install-ubuntu4-1"
                ><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./macos-vbox-ubuntu/iso2.jpg"
                      alt="install-ubuntu4-2"
                ></p>
<h4 id="Step-5-启动">Step 5. 启动</h4>
<ul>
<li>
<p>. 注意，在某些版本下会出现启动时如下的崩溃信息，是因为没有给virtual-box 授权音频输出权限的问题，可以通过[ 设置-&gt;声音-&gt;取消声音 ]解决<br>
<a class="link"   href="https://unix.stackexchange.com/questions/609077/how-to-fix-virtualbox-vm-quit-unexpectedly-when-running-my-ubuntu-20-04-lts-vm" >参考解决方案 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./macos-vbox-ubuntu/bug1.jpg"
                      alt="install-ubuntu5-1"
                ></p>
</li>
<li>
<p>点击启动即可开始安装ubutnu server</p>
</li>
</ul>
<h2 id="三、其他">三、其他</h2>
<h3 id="从主机访问虚拟机">从主机访问虚拟机</h3>
<p>virtual box 默认的网卡 是网络网址转换(NAT) 模式</p>
<ol>
<li>
<p>通过配置端口转发<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./macos-vbox-ubuntu/nat1.jpg"
                      alt="install-nat-1"
                ><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./macos-vbox-ubuntu/nat2.jpg"
                      alt="install-nat-2"
                ></p>
</li>
<li>
<p>可以通过修改模式为桥接网卡, 让主机和虚拟机在同一网段, 就能够直接通过虚拟机的ip访问了<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./macos-vbox-ubuntu/bridge.jpg"
                      alt="install-bridge"
                ></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>macos</tag>
        <tag>virtual-box</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务演进</title>
    <url>/p/micro-service-phylogeny.html</url>
    <content><![CDATA[<p>What is Microservices</p>
<p>A microservice architecture – a variant of the service-oriented architecture structural style – is an architectural<br>
pattern that arranges an application as a collection of loosely-coupled, fine-grained services, communicating through<br>
lightweight protocols.</p>
<p>—— Wikipedia，Microservices</p>
<p>微服务架构——面向服务架构（SOA）结构风格的一种变体——是一种架构模式，它将应用程序安排为松耦合、细粒度服务的集合，通过轻量级协议进行通信。</p>
<p>从维基百科的的描述中，看出微服务与SOA有密切的关系，虽然现在主流的一些说法会说两者有比较明确的立场边界，<br>
但是从SOA开始理解微服务演进也是有意义的。</p>
<h2 id="SOA">SOA</h2>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/micro-service-phylogeny/soa.png"
                      class="" title="img.png"
                >
<p>In software engineering, service-oriented architecture (SOA) is an architectural style that focuses on discrete services<br>
instead of a monolithic design.</p>
<p>—— Wikipedia，Microservices</p>
<p>面向服务的架构( SOA )， 是一种专注于 discrete 服务而不是整体设计的架构风格。discrete service 可以理解为局部的，模块的服务，<br>
从传统的单体架构系统中逐步的研究其中的模块。比如系统拆分出订单服务，产品服务，库存服务。那订单侧会更关注订单创建，sku售卖相关，产品服务关注产品目录结构，管理产品上下架，<br>
库存服务则关注库存进货录入，库存数据。同时订单也会结合产品服务，库存服务进行业务逻辑处理。</p>
<p>SOA原则</p>
<ul>
<li><strong>标准化服务合同</strong> 服务遵循标准通信协议，由一组给定服务中的一个或多个服务描述文档共同定义。</li>
<li><strong>服务引用自治</strong>（松散耦合的一个方面） 服务之间的关系被最小化到他们只知道它们存在的水平，而不知道怎么实现的，底层又是什么，都是不知道的，只知道有这个东西。</li>
<li><strong>服务地点透明度</strong>（疏松耦合的一个方面） 无论网络位于何处，都可以从网络中的任何位置调用服务。</li>
<li><strong>服务长寿</strong> 服务应该设计为长期存在的。在可能的情况下，如果您不需要新功能，服务应该避免强迫消费者进行更改。如果您今天调用服务，您明天应该能够调用相同的服务。</li>
<li><strong>服务抽象</strong> 服务类似黑盒一样，他们的内在逻辑对消费者是隐藏的。</li>
<li><strong>服务自治</strong> 服务是独立的，从设计期和运行期的角度控制它们封装的功能。</li>
<li><strong>服务无状态</strong> 服务本身是无状态的，即返回请求的值或抛出异常，从而最大限度地减少资源使用。</li>
<li><strong>服务粒度</strong> 确保服务具有足够规模和范围的原则。服务向用户提供的功能必须是相关的。</li>
<li><strong>服务规范化</strong> 服务被分解或合并（标准化）以最小化冗余。在某些情况下，这可能无法完成，这些是需要性能优化，访问和聚合的情况。</li>
<li><strong>服务可组合性</strong> 服务可用于组成其他服务。</li>
<li><strong>服务发现</strong> 服务补充了交流元数据，通过它可以有效地发现和解析它们。</li>
<li><strong>服务可重用性</strong> 逻辑分为各种服务，以促进代码的重用。</li>
<li><strong>服务封装</strong> 许多最初未在 SOA 下计划的服务可能会被封装或成为 SOA 的一部分。</li>
</ul>
<p>通过基础的原则，让复杂软件架构，推向更具体，更系统的方向。从广义的面向服务架构来讲，基本是没有什么太多的问题的，但是在SOA实践层面，明确了采用<br>
SOAP 作为远程调用的协议，<br>
依靠 SOAP 协议族（WSDL、UDDI 和一大票 WS-*协议）来完成服务的发布、发现和治理，过于严格的规范定义带来过度的复杂性，使开发者在使用起来需要具备非常复杂的概念，逐渐被开发者抛弃。</p>
<h2 id="微服务">微服务</h2>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/micro-service-phylogeny/micro-service.png"
                      class="" title="img.png"
                >
<p>“微服务”这个技术名词最早在 2005 年就已经被提出，它是由 Peter Rodgers 博士在 2005 年度的云计算博览会（Web Services Edge<br>
2005）上首次使用，<br>
当时的说法是“Micro-Web-Service”，指的是一种专注于单一职责的、语言无关的、细粒度 Web 服务（Granular Web Services）。<br>
这一阶段的微服务是作为一种 SOA 的轻量化的补救方案而被提出的，所以维基百科上说微服务是面向服务架构（SOA）结构风格的一种变体，也不无道理。</p>
<p>微服务真正崛起是在 2014 年，Martin Fowler 与 James Lewis 合写的文章<a class="link"   href="https://martinfowler.com/articles/microservices.html" >《Microservices: A Definition of This New Architectural Term》 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>
中首次了解到微服务的，在此文中，首先给出了现代微服务的概念：“微服务是一种通过多个小型服务组合来构建单个应用的架构风格，这些服务围绕业务能力而非特定的技术标准来构建。<br>
各个服务可以采用不同的编程语言，不同的数据存储技术，运行在不同的进程之中。服务采取轻量级的通信机制和自动化的部署机制实现通信与运维。”<br>
此外，文中列举了微服务的九个核心的业务与技术特征:</p>
<h4 id="围绕业务能力构建-Organized-around-Business-Capability）">围绕业务能力构建 (Organized around Business Capability）</h4>
<p>明确了微服务的拆分是围绕业务能力，当拆分一个大型系统时，管理层容易想到的就是按照技术能力去划分，比如UI，服务端，数据库方向拆分，<br>
但是这种拆分模式，是不利于业务模块独立发展的，一个功能相同的功能，可能分布在不同的产品团队中，各个团队很难对一个概念达成共识，需要频繁地跨团队沟通。<br>
或者就是每个团队自己独立维护，造成企业资源浪费。 而按照业务能力去划分，此类服务针对该业务领域采用广泛的软件实现，包括用户界面、持久存储和任何外部协作。<br>
因此，团队是跨职能的，包括开发所需的全部技能：用户体验、数据库和项目管理。</p>
<h4 id="产品化思维（Products-not-Projects）">产品化思维（Products not Projects）</h4>
<p>软件交付后就认为完成，这个是微服务不推荐的态度，微服务团队应该有产品化思维，需要对微服的整体生命周期负责，就像对待一个产品一样，需要具备用户思维，<br>
与用户更多的沟通，思考该服务如何为用户提供更好的业务能力。</p>
<h4 id="强终端弱管道（Smart-Endpoint-and-Dumb-Pipe）">强终端弱管道（Smart Endpoint and Dumb Pipe）</h4>
<p>在不同进程之间构建通信结构时，我们看到许多产品和方法都强调将重要的智慧融入通信机制本身。这方面的一个很好的例子是企业服务总线 (<br>
ESB)，其中 ESB 产品通常包括用于消息路由、编排、转换和应用业务规则的复杂设施。<br>
而微服务理念表明，业务的逻辑规则应该由服务自身去实现，而不应该将逻辑交给大而全的总线。管道只需要满足基础的数据交互逻辑，类似rabbitmq之类，只负责数据传递给对应的服务，<br>
该服务去完成对应的业务逻辑。</p>
<h4 id="分散治理（Decentralized-Governance）">分散治理（Decentralized Governance）</h4>
<p>不同的服务可以根据自己的特性，团队有权利掌握该服务的各方面权利，比如选择一个更适合的编程语言去开发，微服务和SOA在理念上并不会限制该服务的具体实现，<br>
当然通常情况会尽量选择比较统一的技术栈， 方便团队的统一管理和组织层面的调整。另外权利和责任是相互绑定的，负责该服务的团队，也需要准备好凌晨3点去处理线上问题。</p>
<h4 id="数据去中心化（Decentralized-Data-Management）">数据去中心化（Decentralized Data Management）</h4>
<p>在一个大型系统的数据持久化层面，通常是同一个数据库实例，同一种持久化技术。在微服务理念中，与上面的分散治理一样，微服务的数据管理也是分散的，<br>
团队也可以根据业务特性选择不同的持久化技术，微服务管理自己的数据维护和查询，其他服务不应该绕过服务访问到对应的数据。<br>
同时也提到DDD理念，通过数据自治，服务对于数据模型的设计可以更加地聚焦，例如订单层面的产品和供应链层面的产品虽然可能会描述同一个物体，但是在不同的业务领域，他们关注的数据模型是不一致的。<br>
这里引出的一个问题，在细粒度的微服务架构下，一个复杂的业务逻辑，可能需要不同的服务参与，服务之间由于数据方案都不一致，很难从持久化技术层面保证事务性。<br>
众所周知，分布式事务难以实现，因此微服务架构强调服务之间的无事务协调，并明确认识到一致性可能只是最终一致性，问题通过补偿操作来处理。</p>
<h4 id="通过服务来实现独立自治的组件（Componentization-via-Services）">通过服务来实现独立自治的组件（Componentization via Services）</h4>
<p>通过服务来实现独立自治的组件表明了与使用类库的形式引入客户端不同，服务处于进程外，可以独立进行升级迭代，而不需要客户端重新去加载编译，<br>
客户端通常只拥有对该服务的远程调用sdk，这部分应该是稳定的且又客户端选择的。这里引出的一个问题，服务自治，也需要考虑向下兼容的问题，不能对在使用的约定合同有影响。</p>
<h4 id="基础设施自动化（Infrastructure-Automation）">基础设施自动化（Infrastructure Automation）</h4>
<p>随着服务的拆分，数量逐渐上升，再结合敏捷、MVP的思想，服务的发布频率也逐渐上升。能够将集成发布流程自动化是至关重要的，当然这里要警惕自动化流程仅限于构建和部署，更为关键的是自动化测试。<br>
没有经过严格自动化测试的服务，发布效率再高，也会被用户吐槽的一无是处。不过自动化测试通常也是最复杂的部分，需要开发者投入大量的时间编写测试用例，也要求开发者的代码是方便测试的。</p>
<h4 id="容错性设计（Design-for-Failure）">容错性设计（Design for Failure）</h4>
<p>虽然服务划分之后，对应的团队需要保证该服务的稳定性，但是在复杂的运行环境下，还是要保持服务是可能出现问题的。比如流量突增、网络波动等。这个特性会引出很多需要治理的方向，比如增加动态伸缩、熔断降级，<br>
增加服务监控、服务日志等</p>
<h4 id="演进式设计（Evolutionary-Design）">演进式设计（Evolutionary Design）</h4>
<p>系统的演进有两种方向，一种是对业务功能新增和下线，一种是对已有业务功能的重新设计。演进式设计需要尽量早期就识别出架构风险，这里说的不是设计一个非常完美的架构，而是在设计层面上，是方便迭代升级的。<br>
服务组件化后的关键属性是可替换可升级，能够方便的迭代该服务，而不会影响协作者。这里其实也是一个抽象的思想，服务组件应该是抽象化的，并且边界清晰的，互相协作依赖业务抽象。当然也有其他方式可以方便系统演进，比如引进版本化，<br>
但是版本化往往是最后的手段，版本化会给整个服务架构带来更多的治理问题。</p>
<hr>
<p>微服务的整个架构设计方向就是，功能层面系统按照抽象边界拆分成多个组件服务，服务自治，技术层面就是需要关注组件拆分后如何更好地治理。经常与微服务一起被提起的设计是领域驱动设计，领域驱动设计讲的是如何划分业务边界，<br>
并且在讨论该领域边界内的问题时，从用户、产品、研发各方都能够保持统一的理解，使用领域驱动设计去划分微服务是比较常用的方式。</p>
<p>对于微服务大家也要想明白一点，为什么这么多大公司会推崇微服务架构，毕竟商业层面都是无利不起早的。</p>
<p>这里其实思考一下原先的单体系统，比如一个公司同时有财务系统，供应链系统，电商系统，每个系统都需要用户管理，权限管理，甚至不同系统之间还需要一定的数据交互。<br>
比如财务系统会需要关注供应链平台的财务支出情况，需要关注电商系统的收入情况，电商系统会需要供应链侧的产品库存信息等。如果完全独立团队开发，相互之间协调的部分就会尤为复杂。企业引进微服务后，就变成了各种服务组件化的问题，<br>
供应链侧的产品库存服务独立成标准组件，电商系统也可以通过产品库存服务拿到需要的信息，明确服务职责，也不需要重复开发设计。甚至后面比如公司再上一个批发系统，能够很好地利用现有的组件快速上线。这种思路在国内也被称为中台化思想。</p>
<h2 id="微服务架构实战">微服务架构实战</h2>
<p>前面讲了微服务的设计理念，从2014年正式提出来之后，基本没有太多的变化。接下来我们看看从技术层面，如何落地微服务架构</p>
<h4 id="API-Gateway">API Gateway</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/micro-service-phylogeny/api_gateway.png"
                      class="" title="img_1.png"
                >
<p>服务拆分后，虽然每个服务都具有独立的边界，但是通常每个服务都需要配备适当的治理策略，如访问日志，限流，超时控制，负载均衡，熔断降级等。同时还需要一定的业务控制，如身份认证和权限控制。<br>
如果这些仍然需要各个服务自行管理，那么服务需要处理的不仅仅是业务问题。<br>
尽管API Gateway在微服务出现之前就已经存在，但是结合微服务架构后，它的作用和意义变得更加明显。在微服务架构的实践中，API Gateway几乎是必不可少的。</p>
<h4 id="Service-Mesh">Service Mesh</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/micro-service-phylogeny/service_mesh.png"
                      class="" title="img.png"
                >
<p>在API Gateway 的实践方案中，架构解决了客户端到服务端的问题，但使用API Gateway 并不能很好地处理服务间调用的问题，在Service Mesh 理念没有提出来之前，基本上两种方案解决服务间治理。</p>
<ul>
<li>服务间的调用，也通过网关转发至远程服务</li>
<li>二是部署多个API Gateway，区分内部网关和外部网关之类。</li>
</ul>
<p>前者一个很显然的问题就是，会造成单点问题比较严重，网关容易成为整个系统的瓶颈，即使网关可以水平扩展。后者其实和Service Mesh理念比较接近了，但是同样还有一定的单点风险。</p>
<p>而Service Mesh概念中，将服务间调用的问题绑定在单个服务副本上，每个服务副本进行远程调用的时候，都会经过一个称为Sidecar的程序，这个程序与服务副本伴生，提供重试/超时、监控、追踪和服务发现等能力。<br>
Service Mesh分为数据平面和控制平面，Sidecar处理的部分就是数据平面，控制平面是类似一个控制中心，统一管理Sidecar相关的配置并下发给Sidecar，同时收集Sidecar上报的注册、监控、日志等信息。</p>
<p>Istio 是比较流行的Service Mesh 实践方案，使用网络代理的方式实现Sidecar，无侵入式实现服务间治理。</p>
<h4 id="Dapr">Dapr</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/micro-service-phylogeny/dapr.png"
                      class="" title="img.png"
                >
<p>Service Mesh 是在2015年提出来的，现代微服务架构基本是按照Service Mesh理念落地的。然而Service Mesh 目前只解决了服务间的调用问题，特别是Istio这种通过网络代理的形式实现的Sidecar，<br>
很难解决服务与中间件调用的问题。比如Mysql、Redis、MQ通常是比较常用的中间件，Istio想要接入就需要分析各种复杂的私有协议，大大的增加了Sidecar的复杂度。2020年Dapr理念由微软提出，一下子就<br>
将服务间治理推向更抽象的方向。</p>
<p>Dapr（分布式应用程序运行时）在传统Sidecar理念上，增加了组件的概念，包括常见用的状态存储、服务发现、中间件、Pub/Sub 代理等，其实就是将常用的一些基础组件抽象，例如状态存储组件，<br>
就代表了具备数据存储的一系列中间价，如Mysql、MongoDB、Redis。开发者通过组件绑定的API，像访问远程服务一样去访问存储，而Sidecar程序则会在其中提供关键的能力。</p>
<p>虽然Dapr官方认为，Dapr并不是Service Mesh的下一代架构，他们有自己的职责范围(<a class="link"   href="https://www.bookstack.cn/read/dapr-1.4-zh/08834f926c98fde9.md" >Dapr与Service Mesh  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>))，<br>
因为微软的Dapr是以一个实践产品提出的，即提供了成熟的开箱即用的解决方案，但其组件抽象设计理念，笔者认为是可以作为下一代微服务架构的方向的。</p>
<h4 id="Ending">Ending</h4>
<p>通过以上的几个阶段演进，微服务架构的实践方案，基本已经包含了方方面面，当然架构是随着问题解决的方向不断演进的，永远没有最完美的架构。架构师能做的只是在当前技术背景和环境背景下，选择一个更合适的方案。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>microservice</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>隐入尘烟观影报告</title>
    <url>/p/movie-yinruchenyan.html</url>
    <content><![CDATA[<h2 id="影片叙述">影片叙述</h2>
<h3 id="角色背景">角色背景</h3>
<p>男主马有铁排行老四，哥哥马有金、马有银都已经去世，尽管三哥马有铜日子过得不错，但他只能寄居在村里被弃置的空屋中，守着一头驴子过日子，被村里人笑称为“没有比你更穷的”。</p>
<p>女主曹桂英常年在哥哥嫂子家过着被人嫌弃的生活，住在风吹雨淋的木棚，气虚体寒，一条腿还瘸了，干不了重体力活。她患有尿路疾病，不分时间场合都会小便失禁。由于没有生育能力，她在农村的婚恋市场处于食物链底层。</p>
<p>在一次相亲中两人相遇，两人算是都在村里的底部，在外人看来，两人倒也合适。拍了张不算很正式的结婚照，两人到了中年也算真正成了家。不过按两人的条件，也没有操办什么婚宴。男主其实表现的对这段婚姻还是比较满意的，精心的将送来的双喜贴纸，贴在了别人弃置的空房里，开始了新的生活。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/movie-yinruchenyan/img.png"
                      class="" title="img.png"
                >
<h3 id="故事走向">故事走向</h3>
<p>影片一条线是讲村里的收粮的老板生病了，需要熊猫血的救助，而男主则是村里唯一的熊猫血。为了让老板病好起来，还上拖欠全村人的粮钱，善良的男主开始给老板无偿献血。整个献血周期贯穿影片大部分，隔一段时间，老板的儿子就会来村里找男主抽血。献血需要到县城老板家楼下，老板儿子便开车宝马载着男主和女主出门，即便女主很不愿意，因为她知道自己身上得病出门总是会很尴尬。</p>
<p>影片另一条线就是两人的房子。因为两人一直使用的是村里被弃置的空房，在村组织不断发展下，男主所住的空房一个接一个的被拆除。一次又一次的搬家，让两人非常想拥有属于自己的房子。从活泥土，切成块，晒干，经历风风雨雨，两人总算是把自己的房子给搭了起来，将旧房檐下的燕窝安上，再将结婚时的双喜帖子，贴在属于自己的床头。“自己做梦都没有想到，这辈子还能有个家，还能睡在自己的炕上”。</p>
<p>中间有个片段，一次女主在田地里草编出一只驴，男主感叹“还是草编的驴好 不吃草 也就不叫人使唤”。影片中从头到尾把底层百姓这种被他人使唤的情景多次描写。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/movie-yinruchenyan/img2.png"
                      class="" title="img.png"
                >
<p>故事后来两人也步入了正常的农田生活，开始养起了鸡，种了小麦，玉米，后面还搭了个猪圈。可是女主终究抗不住这么劳累的日子，慢慢地，背部越来越弯。</p>
<p>一次女主劳作时，头晕发烧，让女主站也站不起来，男主将女主扶上床后，细心的照料，将煮好的鸡蛋给女主。“这第一颗属于自己的鸡蛋”。随后男主便又去农田里干活，可谁知，这一别，便是永别。女主想给男主送点吃的喝的，就像平常一样，可生病的女主，一头晕便，扎进了路边的很深小河中。等村民发现时，已经晚了。</p>
<p>随后，男主将女主安葬好后，送走了陪伴自己多年的驴，卖掉了家里所有的粮食，还清了所有的欠债，甚至和邻居借用的10个鸡蛋。影片最后，男主也消失在了镜头。有人说男主服用买来的农药死了，有人说男主后面还一个人活着。可这其实也不重要了，在女主逝去的那一刻，男主已经失去了生活的意义，没有亲人在意，没有邻居关心，原本只有二人相互依偎，可当另一伴不在后，一个人活着又和死去有什么区别。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/movie-yinruchenyan/img3.png"
                      class="" title="img.png"
                >
<h2 id="影片总结">影片总结</h2>
<p>没写一个苦字，却苦出天际，没说一句爱字，却爱到骨髓。</p>
<p>影片整个讲述的就是一个上个世纪最底层农村人的故事，剧情很平淡，也很真实。</p>
<p>被风刮来刮去，麦子能说个啥？被飞过的麻雀啄食，麦子能说个啥？被自家驴啃了，麦子能说个啥？被夏天的镰刀割去，麦子能说个啥？</p>
<h2 id="笔者感悟">笔者感悟</h2>
<p>让我触动的是真实感，很多网评会表示怀疑，因为很多人并没有见识过真正的苦命百姓。从农村长大的我，虽然没有影片中那样的窘迫，但也见过类似真真切切的事情了，<br>
在底层的人，有的只是自己的朴实，只能面对强权的低头，一辈子不过就是给别人当做肥料罢了，又有什么资格去说不呢。</p>
<p>不过这类的故事太多，或者说对我来说并不新鲜，没有给我带来太多的价值。因为生活本就是如此，各有各的命。</p>
<p>如果你身处这样的环境，能够做的是尽人事听天命。如果不是，就持着未经他人苦，莫劝他人善的原则吧～</p>
<hr>
<p>ps: 然而这样的写实的作品，竟然遭遇下架，影视工作者在这片土地上，真是很难遵从本心去编撰</p>
]]></content>
      <categories>
        <category>观影报告</category>
      </categories>
      <tags>
        <tag>movies</tag>
      </tags>
  </entry>
  <entry>
    <title>配置地址走指定网卡</title>
    <url>/p/network-interface-auto-route.html</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>由于公司提供的vpn属于 L2TP 协议，为二层隧道协议，通过路由表控制，要想实现访问公司服务，最简单的就是将默认路由配置成 vpn<br>
的网关。（通过VPN连接发送所有流量）</p>
<p>说明：</p>
<ol>
<li>通常vpn会增加指定的私有网段的转发，如果公司内部的服务都是私网地址，一般不需要处理</li>
<li>当有些公司的服务配置的是公网地址，但是该地址通过ip白名单形式，限制非公司出口ip访问，就可以按照本教材处理</li>
<li>本教程本质是通过 ip route 配置特定路由，所以也可以解决多网卡下，需要转发指定的地址到指定网卡的场景</li>
<li>本文档基于macos系统，其他系统思路类似</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/network-interface-auto-route/img.png"
                      class="" title="img.png"
                >
<p>在路由表上的效果就是在最上面会添加一条默认路由</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -nr</span><br><span class="line">Routing tables</span><br><span class="line"></span><br><span class="line">Internet:</span><br><span class="line">Destination        Gateway            Flags        Netif Expire</span><br><span class="line">default            <span class="built_in">link</span><span class="comment">#18            UCSIg         ppp0</span></span><br><span class="line">default            10.89.89.1         UGScg          en0</span><br></pre></td></tr></table></figure></div>
<p>但是通常我们并不是想要使用vpn转发所有的流量，一是访问非公司的网页时，速度会受公司的统一带宽影响，二是google之类的高级网站，需要使用各自的神秘力量访问，走公司网络时，则无法正常访问了。</p>
<p>那我们如何实现指定的地址走公司的网络，其他的地址还是走默认的网络呢。</p>
<h2 id="方案1">方案1</h2>
<p>其实方案也很简单，就是在路由层面，自己修改路由表，达成能自定义路由</p>
<h3 id="第一步">第一步</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/network-interface-auto-route/img2.png"
                      class="" title="img.png"
                >
<p>取消转发所有流量，可以看到vpn已经不是优先级最高的</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -nr</span><br><span class="line">Routing tables</span><br><span class="line"></span><br><span class="line">Internet:</span><br><span class="line">Destination        Gateway            Flags        Netif Expire</span><br><span class="line">default            10.89.89.1         UGScg          en0</span><br><span class="line">default            <span class="built_in">link</span><span class="comment">#18            UGScg          ppp0</span></span><br></pre></td></tr></table></figure></div>
<h3 id="第二步">第二步</h3>
<p>添加指定的路由规则，比如我们要让 <a class="link"   href="https://about.gitlab.com" >https://about.gitlab.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 走vpn网络，首先获取该域名的ip地址</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ dig about.gitlab.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; about.gitlab.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 36117</span></span><br><span class="line"><span class="string">;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 1232</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;about.gitlab.com.		IN	A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">about.gitlab.com.	30	IN	A	151.101.66.49</span></span><br><span class="line"><span class="string">about.gitlab.com.	30	IN	A	151.101.130.49</span></span><br><span class="line"><span class="string">about.gitlab.com.	30	IN	A	151.101.194.49</span></span><br><span class="line"><span class="string">about.gitlab.com.	30	IN	A	151.101.2.49</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 20 msec</span></span><br><span class="line"><span class="string">;; SERVER: 10.89.89.1#53(10.89.89.1)</span></span><br><span class="line"><span class="string">;; WHEN: Sun Feb 19 14:54:41 CST 2023</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 109</span></span><br></pre></td></tr></table></figure></div>
<p>然后找到vpn的网关地址</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/network-interface-auto-route/img3.png"
                      class="" title="img.png"
                >
<p>然后将地址添加到对应的网关下 192.168.199.195</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo route add 151.101.66.49 192.168.199.195</span><br><span class="line">sudo route add 151.101.130.49 192.168.199.195</span><br><span class="line">sudo route add 151.101.194.49 192.168.199.195</span><br><span class="line">sudo route add 151.101.2.49 192.168.199.195</span><br></pre></td></tr></table></figure></div>
<p>这时候 <a class="link"   href="https://about.gitlab.com" >https://about.gitlab.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 就会走公司网络了，其他没有配置的仍然走原先的网络.</p>
<h4 id="说明">说明</h4>
<ol>
<li>Route 命令添加的路由重启之后会失效，若需要持久化需要使用（&quot;xxx&quot;是对应的网络连接，macos<br>
下对网络连接的命名）<code>networksetup -setadditionalroutes xxx 151.101.66.49 255.255.255.255 192.168.199.195</code></li>
<li>vpn的网关地址可能会在重新连接更新，也是需要重新配置</li>
<li>如果域名的 dns 解析地址更换了，也是需要重新配置</li>
</ol>
<p>总结: 不推荐使用手动配置处理该场景，因为经常需要重新配置。所以理想情况就是，启动vpn之后，自动添加所需要路由，重连会动态修改，并且能够支持dns识别。请看方案2</p>
<h2 id="方案2">方案2</h2>
<p>Github 项目 <a class="link"   href="https://github.com/attson/netcatcher" >https://github.com/attson/netcatcher <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 实现当对应的 network interface 连接时，自动添加相关的路由</p>
<h3 id="第一步-2">第一步</h3>
<p>Macos 请注意 darwin_amd64 和 darwin_arm64 选择</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s https://raw.githubusercontent.com/attson/netcatcher/main/install/darwin.sh | netcatcher_VERSION=v0.2.0 netcatcher_OS=darwin_amd64 bash</span><br></pre></td></tr></table></figure></div>
<p><em>执行过程会询问密码，需要root权限去管理route.</em></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="comment"># 执行输出日志</span></span><br><span class="line"></span><br><span class="line">----------- install success. enjoy it! ----------</span><br><span class="line"></span><br><span class="line">default config: don<span class="string">&#x27;t forget update</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;interfaces&quot;: [</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;name&quot;: &quot;ppp0&quot;,</span></span><br><span class="line"><span class="string">      &quot;routes&quot;: [</span></span><br><span class="line"><span class="string">        &quot;github.com&quot;,</span></span><br><span class="line"><span class="string">        &quot;192.168.188.11&quot;,</span></span><br><span class="line"><span class="string">        &quot;192.168.188.0/24&quot;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">edit config: vim /usr/local/bin/netcatcher_v0.2.0_darwin_amd64/config.json</span></span><br><span class="line"><span class="string">[notice] com.attson.netcatcher runAtLoad...</span></span><br><span class="line"><span class="string">start cmd: sudo launchctl load /Library/LaunchDaemons/com.attson.netcatcher.plist</span></span><br><span class="line"><span class="string">stop cmd: sudo launchctl unload /Library/LaunchDaemons/com.attson.netcatcher.plist</span></span><br></pre></td></tr></table></figure></div>
<h3 id="第二步-2">第二步</h3>
<p>配置 /usr/local/bin/netcatcher_v0.2.0_darwin_amd64/config.json, 添加你需要代理的地址，支持域名，ip，ip，ip+mask。</p>
<p>配置的时候注意interface name, 这个通过 <code>ifconfig</code> 可以查看, 而不是 macos 网络连接里面的名称</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;interfaces&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ppp0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;routes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;about.gitlab.com&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">sudo launchctl load /Library/LaunchDaemons/com.attson.netcatcher.plist</span><br><span class="line"><span class="comment"># 暂停</span></span><br><span class="line">sudo launchctl unload /Library/LaunchDaemons/com.attson.netcatcher.plist</span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line"><span class="built_in">tail</span> -f /usr/local/var/log/com.attson.netcatcher.log</span><br></pre></td></tr></table></figure></div>
<p>这样就不需要频繁自己修改路由了，vpn挂着，也不影响正常上网。</p>
<h2 id="更新-2023年10月16日-支持windows">更新 2023年10月16日 支持windows</h2>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>macos</tag>
        <tag>route</tag>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>开源版 rocketmq 安装教程及问题解决</title>
    <url>/p/rocketmq.html</url>
    <content><![CDATA[<h2 id="一、安装和启动">一、安装和启动</h2>
<h3 id="环境-在不同环境下表现会有些差异">环境 (在不同环境下表现会有些差异)</h3>
<ul>
<li>Ubuntu 20.04</li>
<li>rocketmq 版本 4.8.0</li>
<li>jdk11</li>
<li>bash</li>
</ul>
<h3 id="步骤">步骤</h3>
<h4 id="1-下载源码包-编译">1. 下载源码包 &amp;&amp; 编译</h4>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install maven</span><br><span class="line"></span><br><span class="line">git clone https://github.com/apache/rocketmq.git</span><br><span class="line"></span><br><span class="line">cd rocketmq</span><br><span class="line"></span><br><span class="line">mvn -Prelease-all -DskipTests clean install -U</span><br><span class="line"></span><br><span class="line">// build完成后在 distribution/target/rocketmq-4.8.0/rocketmq-4.8.0</span><br><span class="line"></span><br><span class="line">// 移动软件包到 /usr/local</span><br><span class="line">mv distribution/target/rocketmq-4.8.0/rocketmq-4.8.0 /usr/local</span><br><span class="line">cd /usr/local/rocketmq-4.8.0/bin</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/rocketmq/cmd-list.png"
                      class="" title="cmd-list"
                >
<h4 id="2-启动-mqnamesrv-mqbroker">2. 启动 mqnamesrv mqbroker</h4>
<p>主要执行程序</p>
<ul>
<li>mqnamesrv</li>
<li>mqbroker</li>
</ul>
<h4 id="启动-mqnamesrv">启动 mqnamesrv</h4>
<p><code>./mqnamesrv</code></p>
<h4 id="mqnamesrv-启动成功">mqnamesrv 启动成功</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/rocketmq/mqnamesrc-started.png"
                      class="" title="mqnamesrc-started"
                >
<h3 id="启动-mqborker">启动 mqborker</h3>
<p><code>./mqbroker -n localhost:9876</code></p>
<ul>
<li>-n, --namesrvAddr 默认 <code>localhost:9876</code></li>
</ul>
<h4 id="mqbroker-启动成功">mqbroker 启动成功</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/rocketmq/mqbroker-started.png"
                      class="" title="mqbroker-started"
                >
<h3 id="测试服务是否正常">测试服务是否正常</h3>
<p><code> ./tools.sh org.apache.rocketmq.example.quickstart.Producer</code></p>
<h4 id="Producer-测试成功">Producer 测试成功</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/rocketmq/producer-success.png"
                      class="" title="producer-success"
                >
<h4 id="Consumer-测试成功">Consumer 测试成功</h4>
<p><code>./tools.sh org.apache.rocketmq.example.quickstart.Consumer</code></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/rocketmq/consumer-success.png"
                      class="" title="consumer-success"
                >
<h3 id="3-安装图形界面">3. 安装图形界面</h3>
<p><a class="link"   href="https://github.com/apache/rocketmq-externals.git" >https://github.com/apache/rocketmq-externals.git <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>rocketmq-console</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br><span class="line">cd target</span><br><span class="line">mv rocketmq-console-ng-2.0.0.jar /usr/local/</span><br><span class="line">cd /usr/local</span><br><span class="line">java -jar rocketmq-console-ng-2.0.0.jar</span><br></pre></td></tr></table></figure></div>
<h4 id="成功界面">成功界面</h4>
<ul>
<li>默认 localhost:8080</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/rocketmq/console.png"
                      class="" title="console.png"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/rocketmq/dashboard.png"
                      class="" title="dashboard.png"
                >
<h3 id="常见问题">常见问题</h3>
<h4 id="1-Use-classpath-instead">1. Use -classpath instead:</h4>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@qjue:/usr/local/rocketmq-4.8.0/bin# ./mqnamesrv</span><br><span class="line">/usr/local/rocketmq-4.8.0/bin/runserver.sh: 70: [[: not found</span><br><span class="line">-Djava.ext.dirs=/usr/lib/jvm/java-1.11.0-openjdk-amd64/jre/lib/ext:/usr/local/rocketmq-4.8.0/bin/../lib:/usr/lib/jvm/java-1.11.0-openjdk-amd64/lib/ext is not supported.  Use -classpath instead.</span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will exit.</span><br></pre></td></tr></table></figure></div>
<p><strong>这是因为在java11+ 已经默认移除jre</strong></p>
<ul>
<li>删除 <code>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Djava.ext.dirs=$&#123;JAVA_HOME&#125;/jre/lib/ext:$&#123;BASE_DIR&#125;/lib&quot;</code></li>
<li>删除 <code>export CLASSPATH=.:$&#123;BASE_DIR&#125;/conf:$&#123;CLASSPATH&#125;</code></li>
<li>增加 <code>export CLASSPATH=$&#123;BASE_DIR&#125;/lib/rocketmq-namesrv-4.5.0.jar:$&#123;BASE_DIR&#125;/lib/*:$&#123;BASE_DIR&#125;/conf:$&#123;CLASSPATH&#125;</code></li>
</ul>
<h4 id="2-启动broker失败-Not-enough-space-Cannot-allocate-memory">2. 启动broker失败 Not enough space || Cannot allocate memory</h4>
<p><strong>默认申请的内存大于本机器的可用内存</strong></p>
<p>找到对应的执行文件 <a class="link"   href="http://runserver.sh" >runserver.sh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> || <a class="link"   href="http://runbroker.sh" >runbroker.sh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>
<code>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</code></p>
<ul>
<li>修改一下相关配置 <code>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms521m -Xmx521m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</code></li>
</ul>
<h4 id="3-Xloggc-is-deprecated">3. -Xloggc is deprecated.</h4>
<p>// broker -&gt; rmq_broker_gc_%p_%t.log<br>
// server -&gt; rmq_srv_gc_%p_%t.log</p>
<ul>
<li>删除 <code>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -verbose:gc -Xloggc:$&#123;GC_LOG_DIR&#125;/rmq_broker_gc_%p_%t.log</code></li>
<li>增加 <code>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Xlog:gc*:file=$&#123;GC_LOG_DIR&#125;/rmq_broker_gc_%p_%t.log:time,tags:filecount=5,filesize=30M&quot;</code></li>
</ul>
<h4 id="4-启动broker失败-Could-not-create-the-Java-Virtual-Machine">4. 启动broker失败 Could not create the Java Virtual Machine</h4>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@qjue:/usr/local/rocketmq-4.8.0/bin# ./mqbroker -n localhost:9876</span><br><span class="line">[0.001s][warning][gc] -Xloggc is deprecated. Will use -Xlog:gc:/dev/shm/rmq_broker_gc_%p_%t.log instead.</span><br><span class="line">Unrecognized VM option &#x27;PrintGCDateStamps&#x27;</span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will exit.</span><br></pre></td></tr></table></figure></div>
<ul>
<li>删除 runbroker <code>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=30m&quot;</code></li>
</ul>
<h4 id="5-启动-tools-Producer-失败-connect-to-null-failed-tool-sh">5. 启动 tools Producer 失败 connect to null failed <a class="link"   href="http://tool.sh" >tool.sh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4>
<ul>
<li><a class="link"   href="http://tool.sh" >tool.sh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> export部分 增加<code>export NAMESRV_ADDR=localhost:9876</code></li>
</ul>
<h4 id="6-not-found">6. <code>[[: not found</code></h4>
<p>[[: not found 是因为 <code>mqnamesrv.sh</code> 使用<code>sh</code> 启动了 <code>runserver.sh sh</code> 不支持 &quot;if [[ &quot;</p>
<ul>
<li>将 <code>mqnamesrv.sh</code> <code>sh $&#123;ROCKETMQ_HOME&#125;/bin/runserver.sh</code> 修改成 <code>bash $&#123;ROCKETMQ_HOME&#125;/bin/runserver.sh</code></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>example</tag>
        <tag>rocketmq</tag>
      </tags>
  </entry>
  <entry>
    <title>Too many open files 解决方案</title>
    <url>/p/too-many-open-file.html</url>
    <content><![CDATA[<h2 id="使用版本">使用版本</h2>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># uname -a</span><br><span class="line">Linux 5.4.0-52-generic #57-Ubuntu SMP Thu Oct 15 10:57:00 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"># lsb_release -a</span><br><span class="line">Ubuntu 20.04.1 LTS</span><br><span class="line"></span><br><span class="line">Linux ecs-w0xX6 3.10.0-957.12.2.el7.x86_64 #1 SMP Tue May 14 21:24:32 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"># cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></table></figure></div>
<h2 id="现象">现象</h2>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">accept tcp [::]:3322: accept4: too many open files</span><br></pre></td></tr></table></figure></div>
<h2 id="解决方案">解决方案</h2>
<h3 id="方案一、-ulimit-用于限制-shell-启动的进程所占用的资源">方案一、 ulimit (用于限制 shell 启动的进程所占用的资源)</h3>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ulimit -n 102400</span><br></pre></td></tr></table></figure></div>
<p>注意:</p>
<ul>
<li>ulimit 限制的是当前 shell 进程以及其派生的子进程, 作用范围比较小，可以临时解决在当前shell执行程序的限制</li>
<li>ulimit 命令是 很多shell程序的内置命令，如csh、sh等，所以支持的环境会更多</li>
<li>在某些系统没有pam_limits模块的，可以用此命令结合所要执行的命令一起，实现修改程序的文件描述符限制。如 <code>ulimit -n 102400 &amp;&amp; ./main</code></li>
</ul>
<h3 id="方案二、-更改-etc-security-limits-conf-该文件为pam-中-pam-limits-模块的默认配置文件">方案二、 更改 /etc/security/limits.conf (该文件为<a class="link"   href="https://linux.die.net/man/8/pam_limits" >pam 中 pam_limits <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 模块的默认配置文件)</h3>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.conf  </span><br><span class="line"># 在最后加入  </span><br><span class="line">* soft nofile 102400 </span><br><span class="line">* hard nofile 102400  </span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">* - nofile 102400</span><br></pre></td></tr></table></figure></div>
<p>最前的 * 表示所有用户，可根据需要设置某一用户，例如<br>
root soft nofile 102400<br>
root hard nofile 102400</p>
<p>改完后重新登录就能生效</p>
<p>注意:</p>
<ul>
<li>
<p>在某些系统上(ubuntu?) 通配符 * 会不起效果, 设置指定用户起效 <a class="link"   href="https://serverfault.com/questions/235356/open-file-descriptor-limits-conf-setting-isnt-read-by-ulimit-even-when-pam-limi" >open file descriptor limits.conf setting isn’t read by ulimit even when pam_limits.so is required <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li>
<p>centos6+ 系统，如果有 <code>/etc/security/limits.d/&lt;&gt;-nproc.conf</code> 文件，需检查是否已经有相关配置, 该文件的优先级比 <code>/etc/security/limits.conf</code> 高</p>
</li>
</ul>
<h3 id="方案三、-针对使用supervisor管理的程序">方案三、 针对使用supervisor管理的程序</h3>
<p>在supervisord的配置文件 /etc/supervisor/supervisord.conf 中 [supervisord] 处添加 minfds = 102400</p>
<p><a class="link"   href="http://supervisord.org/configuration.html" >supervisord configuration <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[supervisord]</span><br><span class="line">minfds = 102400</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/too-many-open-file/supervisor.jpg"
                      class="" title="supervisord config"
                >
<h3 id="方案四、-etc-sysctl-conf-该文件为内核配置文件">方案四、/etc/sysctl.conf (该文件为内核配置文件)</h3>
<p>当单进程需求数量超过 <code>cat /proc/sys/fs/nr_open</code> 时<br>
当单机需求数量超过 <code>cat /proc/sys/fs/file-max</code> 时</p>
<p>按需修改 <code>/etc/sysctl.conf</code> 文件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">fs.file-max=2000500</span><br><span class="line">fs.nr_open=2000500</span><br></pre></td></tr></table></figure></div>
<p>file-max: 该值为是内核可分配的最大文件数<br>
nr_open: 该值为单个进程可分配的最大文件数</p>
<h2 id="其他">其他</h2>
<ul>
<li>当大家遇到limits修改不生效的时候，请查一下进程是否只是子进程，如果是，再检查是不是受父进程<code>cat /proc/&lt;pid&gt;/limits</code>配置影响</li>
</ul>
<h2 id="参考">参考</h2>
<p><a class="link"   href="https://developer.51cto.com/art/201701/527470.htm" >你真知道“Too many open files”? <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>issue</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 搭建透明代理，科学上网</title>
    <url>/p/ubuntu-transparent-proxy.html</url>
    <content><![CDATA[<h1>Ubuntu 搭建透明代理，科学上网</h1>
<h2 id="说明">说明</h2>
<p>本教程基于 ubuntu server 22.04, 需要配置的东西较多 (desktop 也是一样有效)</p>
<p>使用</p>
<ul>
<li>dnsmasq</li>
<li>rc.local</li>
<li>ipset</li>
<li>shadowsocks-libev@redir</li>
<li>supervisor</li>
<li>pdnsd</li>
<li>gfwlist2dnsmasq_url</li>
</ul>
<h2 id="安装">安装</h2>
<h3 id="安装-dnsmasq-ipset-shadowsocks-libev-supervisor">安装 dnsmasq, ipset, shadowsocks-libev, supervisor</h3>
<p>使用 apt-get 直接安装，也可以自行编译</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y supervisor dnsmasq shadowsocks-libev ipset</span><br></pre></td></tr></table></figure></div>
<h3 id="安装-pdnsd">安装 pdnsd</h3>
<p>(github 无法访问的，可以使用https://ghproxy.com代理 如 <a class="link"   href="https://ghproxy.com/https://github.com/SAPikachu/pdnsd.git" >https://ghproxy.com/https://github.com/SAPikachu/pdnsd.git <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</p>
<p>使用 <a class="link"   href="https://github.com/SAPikachu/pdnsd.git" >https://github.com/SAPikachu/pdnsd.git <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 编译安装 (pdnsd 原作者已经不维护了，该仓库亲测可用，但是在22.04 上需要稍稍调整)</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/SAPikachu/pdnsd.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> pdnsd</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/pdnsd/</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></div>
<p>如果出现</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/ubuntu-transparent-proxy/pdnsd_fail.png"
                      class="" title="pdnsd_fail.png"
                >
<p>原因是 net/if.h 和 linux/if.h 重复定义，统一使用 linux/if.h 就可以了</p>
<p>修改冲突文件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/&lt;net\/if.h&gt;/&lt;linux\/if.h&gt;/g&#x27;</span> src/conff.h</span><br><span class="line">sed -i <span class="string">&#x27;s/&lt;net\/if.h&gt;/&lt;linux\/if.h&gt;/g&#x27;</span> src/dns.h</span><br><span class="line">sed -i <span class="string">&#x27;s/&lt;net\/if.h&gt;/&lt;linux\/if.h&gt;/g&#x27;</span> src/netdev.c</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/ubuntu-transparent-proxy/pdnsd_update.png"
                      class="" title="pdnsd_update.png"
                >
<h2 id="配置">配置</h2>
<h3 id="配置-shadowsocks-libev">配置 shadowsocks-libev</h3>
<p>新增文件 /etc/shadowsocks-libev/redir.json</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span><span class="string">&quot;xxx.xxx.xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server_port&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;local_port&quot;</span><span class="punctuation">:</span><span class="number">8989</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;server_password&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span><span class="number">3600</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;chacha20-ietf-poly1305&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>local_port 需要与 [iptable](./ubuntu-transparent-proxy.md#配置 rc.local) 转发端口一致</li>
<li>/etc/shadowsocks-libev/redir.json 文件名需要与 systemctl 启动的命令一致 systemctl start shadowsocks-libev-redir@redir 因为该 service 脚本读取的配置文件名是使用 %i.json</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/ubuntu-transparent-proxy/shadowsocks_redir.png"
                      class="" title="shadowsocks_redir.png"
                >
<p>添加 service 重试次数 (重启时, 由于网络组件启动顺序问题，可能会导致ss-redir 启动失败)</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /lib/systemd/system/shadowsocks-libev-redir@.service /etc/systemd/system/shadowsocks-libev-redir@.service</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">StartLimitInterval=200</span></span><br><span class="line"><span class="string">StartLimitBurst=5</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Restart=always</span></span><br><span class="line"><span class="string">RestartSec=30&quot;</span> &gt;&gt; /lib/systemd/system/shadowsocks-libev-redir@.service</span><br></pre></td></tr></table></figure></div>
<h3 id="配置pdnsd">配置pdnsd</h3>
<h4 id="使用-supervisor-管理-pdnsd">使用 supervisor 管理 pdnsd</h4>
<p>新增文件 /etc/supervisor/conf.d/pdnsd.conf</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[program:pdndsd]</span><br><span class="line">command=/usr/local/pdnsd/sbin/pdnsd -c /etc/pdnsd.conf</span><br><span class="line">user=root</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br></pre></td></tr></table></figure></div>
<h4 id="新增文件-etc-pdnsd-conf">新增文件 /etc/pdnsd.conf</h4>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">global &#123;</span><br><span class="line">	perm_cache=4096;</span><br><span class="line">	cache_dir=&quot;/tmp&quot;;</span><br><span class="line">	run_as=&quot;nobody&quot;;</span><br><span class="line">	server_ip = 0.0.0.0;</span><br><span class="line">	server_port = 5354;</span><br><span class="line">	query_method=tcp_only;</span><br><span class="line">	status_ctl = on;</span><br><span class="line">	tcp_server = on;</span><br><span class="line">	min_ttl=1h;</span><br><span class="line">	max_ttl=1w;</span><br><span class="line">	paranoid=on;</span><br><span class="line">	timeout=15;</span><br><span class="line">	randomize_recs = on;</span><br><span class="line">	debug = off;</span><br><span class="line">	daemon = off;</span><br><span class="line">	verbosity = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># The servers provided by OpenDNS are fast, but they do not reply with</span><br><span class="line"># NXDOMAIN for non-existant domains, instead they supply you with an</span><br><span class="line"># address of one of their search engines. They also lie about the addresses of </span><br><span class="line"># of the search engines of google, microsoft and yahoo.</span><br><span class="line"># If you do not like this behaviour the &quot;reject&quot; option may be useful.</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">	label = &quot;GoogleDns&quot;;</span><br><span class="line">	ip = 8.8.8.8,8.8.4.4;</span><br><span class="line">	proxy_only = on;</span><br><span class="line">	timeout = 10;</span><br><span class="line">	uptest = query;</span><br><span class="line">	query_test_name = &quot;www.google.com&quot;;</span><br><span class="line">	purge_cache = off;</span><br><span class="line">	interval = 1m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># The servers provided by OpenDNS are fast, but they do not reply with</span><br><span class="line"># NXDOMAIN for non-existant domains, instead they supply you with an</span><br><span class="line"># address of one of their search engines. They also lie about the addresses of </span><br><span class="line"># of the search engines of google, microsoft and yahoo.</span><br><span class="line"># If you do not like this behaviour the &quot;reject&quot; option may be useful.</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">	label = &quot;opendns&quot;;</span><br><span class="line">	ip = 208.67.222.222, 208.67.220.220;</span><br><span class="line">	proxy_only = on;</span><br><span class="line">	reject = 208.69.32.0/24,  # You may need to add additional address ranges</span><br><span class="line">	         208.69.34.0/24,  # here if the addresses of their search engines</span><br><span class="line">	         208.67.219.0/24; # change.</span><br><span class="line">	reject_policy = fail;     # If you do not provide any alternative server</span><br><span class="line">	                          # sections, like the following root-server</span><br><span class="line">	                          # example, &quot;negate&quot; may be more appropriate here.</span><br><span class="line">	timeout = 10;</span><br><span class="line">	uptest = query;</span><br><span class="line">	query_test_name = &quot;www.google.com&quot;;</span><br><span class="line">	interval = 1m;</span><br><span class="line">	preset = off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">	label = &quot;root-servers&quot;;</span><br><span class="line">	root_server = discover;</span><br><span class="line">	randomize_servers = on; </span><br><span class="line">	ip = 	198.41.0.4,192.228.79.201,192.33.4.12,199.7.91.13,</span><br><span class="line">		192.203.230.10,192.5.5.241,192.112.36.4,128.63.2.53,192.36.148.17,</span><br><span class="line">		192.58.128.30,193.0.14.129,199.7.83.42,202.12.27.33;</span><br><span class="line">	timeout = 15;</span><br><span class="line">	uptest = query;</span><br><span class="line">	query_test_name = .;</span><br><span class="line">	interval = 30m;  </span><br><span class="line">	ping_timeout = 300;</span><br><span class="line">	purge_cache = off;</span><br><span class="line">	edns_query = yes;</span><br><span class="line">	exclude = .localdomain;</span><br><span class="line">	policy = included;</span><br><span class="line">	preset = off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rr &#123;</span><br><span class="line">	name=localhost;</span><br><span class="line">	reverse=on;</span><br><span class="line">	a=127.0.0.1;</span><br><span class="line">	owner=localhost;</span><br><span class="line">	soa=localhost,root.localhost,42,86400,900,86400,86400;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">source&#123;</span><br><span class="line">	owner=localhost;</span><br><span class="line">	file=&quot;/etc/hosts&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="配置-dnsmasq">配置 dnsmasq</h3>
<h4 id="配置-etc-dnsmasq-conf">配置 /etc/dnsmasq.conf</h4>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#check dnssec resource record</span><br><span class="line">dnssec</span><br><span class="line">#this enables dnsmasq send queries to all available dns server and the fastest answer will be used</span><br><span class="line">all-servers</span><br><span class="line">#disable resolv file</span><br><span class="line">no-resolv</span><br><span class="line"># include user conf</span><br><span class="line">conf-dir=/etc/dnsmasq.d</span><br></pre></td></tr></table></figure></div>
<h4 id="配置-etc-dnsmasq-d-server-conf">配置 /etc/dnsmasq.d/server.conf</h4>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Local Process</span><br><span class="line">server=127.0.0.1</span><br><span class="line"># your route dns</span><br><span class="line">#server=192.168.1.1</span><br><span class="line">#FuZhou DNS</span><br><span class="line">server=218.85.157.99</span><br><span class="line">server=218.85.152.99</span><br><span class="line">#Google DNS</span><br><span class="line">server=8.8.8.8</span><br><span class="line">server=8.8.4.4</span><br><span class="line">#Open DNS</span><br><span class="line">server=208.67.220.220</span><br></pre></td></tr></table></figure></div>
<h4 id="配置-etc-dnsmasq-d-gfw-conf">配置 /etc/dnsmasq.d/gfw.conf</h4>
<p>使用 gfwlist2dnsmasq_url 生成 (这里面的域名就是需要被代理的)</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/cokebar/gfwlist2dnsmasq.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> gfwlist2dnsmasq</span><br><span class="line"><span class="comment"># -p 是 pdnsd 的 server_port，需要保持一致</span></span><br><span class="line">./gfwlist2dnsmasq.sh -p 5354 -s gfw -o /etc/dnsmasq.d/gfw.conf</span><br></pre></td></tr></table></figure></div>
<h3 id="配置-rc-local">配置 rc.local</h3>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果 /etc/rc.local 已经存在，建议先备份</span></span><br><span class="line"><span class="built_in">cp</span> /etc/rc.local /etc/rc.local.bak</span><br></pre></td></tr></table></figure></div>
<p>添加 /etc/rc.local</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh -e</span></span><br><span class="line"></span><br><span class="line">ipset create gfw iphash -exist</span><br><span class="line">iptables -t nat -A OUTPUT -p tcp -d 8.8.8.8 -j REDIRECT --to-ports 8989</span><br><span class="line">iptables -t nat -A OUTPUT -p tcp -d 8.8.4.4 -j REDIRECT --to-ports 8989</span><br><span class="line">iptables -t nat -A OUTPUT -p tcp -d 208.67.222.222 -j REDIRECT --to-ports 8989</span><br><span class="line">iptables -t nat -A OUTPUT -p tcp -d 208.67.220.220 -j REDIRECT --to-ports 8989</span><br><span class="line">iptables -t nat -A OUTPUT -p tcp -m <span class="built_in">set</span> --match-set gfw dst -j REDIRECT --to-ports 8989</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">chmod</span> +x /etc/rc.local</span><br><span class="line"><span class="built_in">cp</span> /lib/systemd/system/rc-local.service /etc/systemd/system/rc-local.service</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target&quot;</span> &gt;&gt; /etc/systemd/system/rc-local.service</span><br></pre></td></tr></table></figure></div>
<h3 id="配置-etc-iproute2-rt-tables">配置 /etc/iproute2/rt_tables</h3>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在文件最后增加一行</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">10  gfw&quot;</span> &gt;&gt; /etc/iproute2/rt_tables</span><br></pre></td></tr></table></figure></div>
<h3 id="配置-etc-resolv-conf">配置 /etc/resolv.conf</h3>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;nameserver 127.0.0.1&quot;</span> &gt; /etc/resolv.conf</span><br><span class="line"><span class="comment"># 保护该文件，避免重启被其他程序覆盖</span></span><br><span class="line">chattr +i /etc/resolv.conf</span><br></pre></td></tr></table></figure></div>
<p>所有的配置工作就已经结束了</p>
<h2 id="启动">启动</h2>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重新加载service</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭系统dns</span></span><br><span class="line">systemctl stop systemd-resolved</span><br><span class="line">systemctl <span class="built_in">disable</span> systemd-resolved</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> rc-local &amp;&amp; systemctl restart rc-local</span><br><span class="line"><span class="comment"># 开启dnsmasq</span></span><br><span class="line">systemctl <span class="built_in">enable</span> dnsmasq &amp;&amp; systemctl start dnsmasq</span><br><span class="line"><span class="comment"># 开启shadowsocks</span></span><br><span class="line">systemctl <span class="built_in">enable</span> shadowsocks-libev-redir@redir &amp;&amp; systemctl start shadowsocks-libev-redir@redir</span><br><span class="line">systemctl restart supervisor</span><br><span class="line"><span class="comment"># 运行rc.local 一次</span></span><br><span class="line">bash /etc/rc.local</span><br></pre></td></tr></table></figure></div>
<h2 id="验证">验证</h2>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl www.google.com</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/ubuntu-transparent-proxy/google.png"
                      class="" title="google.png"
                >
<h2 id="附录">附录</h2>
<h3 id="如需添加新的代理域名">如需添加新的代理域名</h3>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">server=/zzux.com/127.0.0.1#5354</span></span><br><span class="line"><span class="string">ipset=/zzux.com/gfw&quot;</span> &gt;&gt; /etc/dnsmasq.d/gfw.conf</span><br><span class="line"></span><br><span class="line">systemctl restart dnsmasq</span><br></pre></td></tr></table></figure></div>
<h3 id="如果重启之后出现无法访问代理网站">如果重启之后出现无法访问代理网站</h3>
<ol>
<li>检查 ss-redir dnsmasq supervisor-pdnsd 运行状况</li>
<li>检查 /etc/resolv.conf 是否被篡改</li>
</ol>
<h3 id="如果碰到类似的界面，使用tab切换到ok就好了">如果碰到类似的界面，使用tab切换到ok就好了</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/p/ubuntu-transparent-proxy/service.png"
                      class="" title="service.png"
                >
<h3 id="参考">参考</h3>
<ul>
<li><a class="link"   href="https://github.com/shadowsocks/shadowsocks-libev/issues/630" >https://github.com/shadowsocks/shadowsocks-libev/issues/630 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/oygza/ubuntuMagic" >https://github.com/oygza/ubuntuMagic <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://unix.stackexchange.com/questions/396978/specifier-resolution-i-and-i-difference" >https://unix.stackexchange.com/questions/396978/specifier-resolution-i-and-i-difference <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>example</tag>
      </tags>
  </entry>
</search>
